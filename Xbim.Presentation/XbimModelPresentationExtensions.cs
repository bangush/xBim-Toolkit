using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Windows.Media.Media3D;
using Xbim.Ifc2x3.Kernel;
using Xbim.Ifc2x3.MaterialResource;
using Xbim.Ifc2x3.PresentationAppearanceResource;
using Xbim.Ifc2x3.ProductExtension;
using Xbim.IO;
using Xbim.XbimExtensions;
using Xbim.XbimExtensions.Interfaces;
using Xbim.XbimExtensions.SelectTypes;

namespace Xbim.Presentation
{
    public static class XbimModelPresentationExtensions
    {
        public static XbimMaterialProvider GetRenderMaterial(this XbimModel model, XbimSurfaceStyle style)
        {
            if (style.IsIfcSurfaceStyle)
            {
                IfcSurfaceStyle surfaceStyle = style.IfcSurfaceStyle(model);
                if (surfaceStyle != null)
                    return new XbimMaterialProvider(surfaceStyle.ToMaterial());
                
            }
            //nothing specific go for default of type
            return ModelDataProvider.GetDefaultMaterial(style.IfcType);
        }

        public static IEnumerable<IfcRoot> GetInstancesOfMaterial(this IXbimInstanceCollection InstanceCollection, IfcMaterialSelect matSel)
        {
            Debug.WriteLine(matSel.EntityLabel.ToString());
            if (matSel is IfcMaterial)
            {
                
            }
            else if (matSel is IfcMaterialLayer)
            {
                
            }
            else if (matSel is IfcMaterialList)
            {
                // todo: bonghi: this should return a list of objects using the same list
                // complexity is that there are cases in which multiple IfcMaterialList are generated by exporters even if they share the same set of Materials.
                // 
            }
            else if (matSel is IfcMaterialLayerSet)
            {
                var lsUsages =  InstanceCollection.OfType<IfcMaterialLayerSetUsage>().Where(
                    x => Math.Abs(x.ForLayerSet.EntityLabel) == Math.Abs(((IfcMaterialLayerSet)matSel).EntityLabel)
                    );
                foreach (var lsUsage in lsUsages)
                {
                    var Assocs = InstanceCollection.OfType<IfcRelAssociatesMaterial>().Where(
                        x => Math.Abs(x.RelatingMaterial.EntityLabel) == Math.Abs(lsUsage.EntityLabel)
                        );
                    foreach (var assoc in Assocs)
                    {
                        foreach (var item in assoc.RelatedObjects)
	                    {
                            yield return item;
	                    }
                    }
                }
            }
            else if (matSel is IfcMaterialLayerSetUsage)
            {
                // identify the underlying material layer set and return all its usages.
                foreach (var item in InstanceCollection.GetInstancesOfMaterial(((IfcMaterialLayerSetUsage)matSel).ForLayerSet))
                {
                    yield return item;
                }
            }
            else
            {
                Debugger.Break();
                Debug.WriteLine("Unexpected case");
            }
        }
    }
}
