// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  PC-CERNY
// DateTime: 4.2.2014 17:18:46
// UserName: cerny.m
// Input file <Parser.y - 4.2.2014 17:18:12>

// options: conflicts lines gplex conflicts listing

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Xbim.Gppg;
using Xbim.XbimExtensions.Interfaces;
using System.Linq.Expressions;

namespace Xbim.Script
{
internal enum Tokens {error=60,
    EOF=61,INTEGER=62,DOUBLE=63,STRING=64,BOOLEAN=65,NONDEF=66,
    DEFINED=67,IDENTIFIER=68,OP_EQ=69,OP_NEQ=70,OP_GT=71,OP_LT=72,
    OP_GTE=73,OP_LTQ=74,OP_CONTAINS=75,OP_NOT_CONTAINS=76,OP_AND=77,OP_OR=78,
    PRODUCT=79,PRODUCT_TYPE=80,FILE=81,MODEL=82,CLASSIFICATION=83,PROPERTY_SET=84,
    LAYER_SET=85,REFERENCE=86,ORGANIZATION=87,OWNER=88,CODE=89,WHERE=90,
    WITH_NAME=91,DESCRIPTION=92,NEW=93,ADD=94,TO=95,REMOVE=96,
    FROM=97,FOR=98,NAME=99,PREDEFINED_TYPE=100,TYPE=101,MATERIAL=102,
    THICKNESS=103,GROUP=104,IN=105,IT=106,EVERY=107,COPY=108,
    RULE=109,SELECT=110,SET=111,CREATE=112,DUMP=113,CLEAR=114,
    OPEN=115,CLOSE=116,SAVE=117,COUNT=118,VALIDATE=119,NORTH_OF=120,
    SOUTH_OF=121,WEST_OF=122,EAST_OF=123,ABOVE=124,BELOW=125,SPATIALLY_EQUALS=126,
    DISJOINT=127,INTERSECTS=128,TOUCHES=129,CROSSES=130,WITHIN=131,SPATIALLY_CONTAINS=132,
    OVERLAPS=133,RELATE=134,THE_SAME=135,DELETED=136,INSERTED=137,EDITED=138};

internal partial struct ValueType
#line 15 "Parser.y"
{
#line 16 "Parser.y"
		public string strVal;
#line 17 "Parser.y"
		public int intVal;
#line 18 "Parser.y"
		public double doubleVal;
#line 19 "Parser.y"
		public bool boolVal;
#line 20 "Parser.y"
		public Type typeVal;
#line 21 "Parser.y"
		public object val;
#line 22 "Parser.y"
	  }
// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from Parser.y - 4.2.2014 17:18:12
#line 2 "Parser.y"
	
  // End verbatim content from Parser.y - 4.2.2014 17:18:12

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[150];
  private static State[] states = new State[286];
  private static string[] nonTerms = new string[] {
      "expressions", "$accept", "expression", "selection", "creation", "addition", 
      "attr_setting", "variables_actions", "model_actions", "rule_check", "value_setting_list", 
      "value_setting", "attribute", "value", "num_value", "string_list", "selection_statement", 
      "op_bool", "object", "conditions_set", "creation_statement", "layers", 
      "layer", "conditions", "condition", "attributeCondition", "materialCondition", 
      "typeCondition", "propertyCondition", "groupCondition", "spatialCondition", 
      "modelCondition", "existanceCondition", "op_cont", "op_num_rel", "op_spatial", 
      "op_existance", };

  static Parser() {
    states[0] = new State(new int[]{110,6,68,159,112,184,94,190,96,205,111,211,113,237,114,250,118,253,115,257,116,262,119,264,117,266,109,277,60,284},new int[]{-1,1,-3,285,-4,4,-5,182,-6,188,-7,209,-8,235,-9,255,-10,275});
    states[1] = new State(new int[]{61,2,110,6,68,159,112,184,94,190,96,205,111,211,113,237,114,250,118,253,115,257,116,262,119,264,117,266,109,277,60,284},new int[]{-3,3,-4,4,-5,182,-6,188,-7,209,-8,235,-9,255,-10,275});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{59,5});
    states[5] = new State(-4);
    states[6] = new State(new int[]{107,8},new int[]{-17,7});
    states[7] = new State(-40);
    states[8] = new State(new int[]{83,151,79,154,80,155,102,156,104,157,87,158},new int[]{-19,9});
    states[9] = new State(new int[]{64,10,90,11,59,-42});
    states[10] = new State(-43);
    states[11] = new State(new int[]{40,13,99,35,92,36,100,37,102,39,103,46,101,58,64,71,104,89,106,93,82,131,77,-67,78,-67,59,-67},new int[]{-20,12,-24,150,-25,143,-26,22,-13,23,-27,38,-28,57,-29,87,-30,88,-31,92,-32,130,-33,140});
    states[12] = new State(-44);
    states[13] = new State(new int[]{99,35,92,36,100,37,102,39,103,46,101,58,64,71,104,89,106,93,82,131,41,-67,77,-67,78,-67},new int[]{-24,14,-25,143,-26,22,-13,23,-27,38,-28,57,-29,87,-30,88,-31,92,-32,130,-33,140});
    states[14] = new State(new int[]{41,15,77,20,78,141});
    states[15] = new State(new int[]{77,16,78,145,59,-62,98,-62});
    states[16] = new State(new int[]{40,17,99,35,92,36,100,37,102,39,103,46,101,58,64,71,104,89,106,93,82,131,59,-67,98,-67},new int[]{-25,144,-26,22,-13,23,-27,38,-28,57,-29,87,-30,88,-31,92,-32,130,-33,140});
    states[17] = new State(new int[]{99,35,92,36,100,37,102,39,103,46,101,58,64,71,104,89,106,93,82,131,41,-67,77,-67,78,-67},new int[]{-24,18,-25,143,-26,22,-13,23,-27,38,-28,57,-29,87,-30,88,-31,92,-32,130,-33,140});
    states[18] = new State(new int[]{41,19,77,20,78,141});
    states[19] = new State(-58);
    states[20] = new State(new int[]{99,35,92,36,100,37,102,39,103,46,101,58,64,71,104,89,106,93,82,131,77,-67,78,-67,59,-67,41,-67,98,-67},new int[]{-25,21,-26,22,-13,23,-27,38,-28,57,-29,87,-30,88,-31,92,-32,130,-33,140});
    states[21] = new State(-64);
    states[22] = new State(-68);
    states[23] = new State(new int[]{69,27,70,29,75,33,76,34},new int[]{-18,24,-34,31});
    states[24] = new State(new int[]{64,25,66,26});
    states[25] = new State(-76);
    states[26] = new State(-77);
    states[27] = new State(new int[]{67,28,64,-133,66,-133});
    states[28] = new State(-78);
    states[29] = new State(new int[]{67,30,64,-134,66,-134});
    states[30] = new State(-79);
    states[31] = new State(new int[]{64,32});
    states[32] = new State(-80);
    states[33] = new State(-139);
    states[34] = new State(-140);
    states[35] = new State(-81);
    states[36] = new State(-82);
    states[37] = new State(-83);
    states[38] = new State(-69);
    states[39] = new State(new int[]{69,44,70,45,75,33,76,34},new int[]{-18,40,-34,42});
    states[40] = new State(new int[]{64,41});
    states[41] = new State(-84);
    states[42] = new State(new int[]{64,43});
    states[43] = new State(-85);
    states[44] = new State(-133);
    states[45] = new State(-134);
    states[46] = new State(new int[]{69,44,70,45,71,53,72,54,73,55,74,56},new int[]{-18,47,-35,51});
    states[47] = new State(new int[]{63,49,62,50},new int[]{-15,48});
    states[48] = new State(-86);
    states[49] = new State(-24);
    states[50] = new State(-25);
    states[51] = new State(new int[]{63,49,62,50},new int[]{-15,52});
    states[52] = new State(-87);
    states[53] = new State(-135);
    states[54] = new State(-136);
    states[55] = new State(-137);
    states[56] = new State(-138);
    states[57] = new State(-70);
    states[58] = new State(new int[]{70,65,69,67,75,33,76,34,64,71,99,35,92,36,100,37},new int[]{-18,59,-34,63,-29,69,-26,70,-13,23});
    states[59] = new State(new int[]{80,60,64,61,66,62});
    states[60] = new State(-88);
    states[61] = new State(-89);
    states[62] = new State(-91);
    states[63] = new State(new int[]{64,64});
    states[64] = new State(-90);
    states[65] = new State(new int[]{67,66,80,-134,64,-134,66,-134});
    states[66] = new State(-92);
    states[67] = new State(new int[]{67,68,80,-133,64,-133,66,-133});
    states[68] = new State(-93);
    states[69] = new State(-94);
    states[70] = new State(-95);
    states[71] = new State(new int[]{70,83,69,85,71,53,72,54,73,55,74,56,75,33,76,34},new int[]{-18,72,-35,78,-34,81});
    states[72] = new State(new int[]{62,73,63,74,64,75,65,76,66,77});
    states[73] = new State(-98);
    states[74] = new State(-100);
    states[75] = new State(-102);
    states[76] = new State(-104);
    states[77] = new State(-105);
    states[78] = new State(new int[]{62,79,63,80});
    states[79] = new State(-99);
    states[80] = new State(-101);
    states[81] = new State(new int[]{64,82});
    states[82] = new State(-103);
    states[83] = new State(new int[]{67,84,62,-134,63,-134,64,-134,65,-134,66,-134});
    states[84] = new State(-106);
    states[85] = new State(new int[]{67,86,62,-133,63,-133,64,-133,65,-133,66,-133});
    states[86] = new State(-107);
    states[87] = new State(-71);
    states[88] = new State(-72);
    states[89] = new State(new int[]{64,71,99,35,92,36,100,37},new int[]{-29,90,-26,91,-13,23});
    states[90] = new State(-96);
    states[91] = new State(-97);
    states[92] = new State(-73);
    states[93] = new State(new int[]{69,121,70,45},new int[]{-18,94});
    states[94] = new State(new int[]{105,97,120,106,121,107,122,108,123,109,124,110,125,111,126,112,127,113,128,114,129,115,130,116,131,117,75,118,133,119,134,120},new int[]{-36,95});
    states[95] = new State(new int[]{68,96});
    states[96] = new State(-108);
    states[97] = new State(new int[]{82,98});
    states[98] = new State(new int[]{64,99});
    states[99] = new State(new int[]{77,100});
    states[100] = new State(new int[]{106,101});
    states[101] = new State(new int[]{69,44,70,45},new int[]{-18,102});
    states[102] = new State(new int[]{105,103});
    states[103] = new State(new int[]{82,104});
    states[104] = new State(new int[]{64,105});
    states[105] = new State(-113);
    states[106] = new State(-118);
    states[107] = new State(-119);
    states[108] = new State(-120);
    states[109] = new State(-121);
    states[110] = new State(-122);
    states[111] = new State(-123);
    states[112] = new State(-124);
    states[113] = new State(-125);
    states[114] = new State(-126);
    states[115] = new State(-127);
    states[116] = new State(-128);
    states[117] = new State(-129);
    states[118] = new State(-130);
    states[119] = new State(-131);
    states[120] = new State(-132);
    states[121] = new State(new int[]{135,126,136,127,137,128,138,129,105,-133,120,-133,121,-133,122,-133,123,-133,124,-133,125,-133,126,-133,127,-133,128,-133,129,-133,130,-133,131,-133,75,-133,133,-133,134,-133},new int[]{-37,122});
    states[122] = new State(new int[]{105,123});
    states[123] = new State(new int[]{82,124});
    states[124] = new State(new int[]{64,125});
    states[125] = new State(-112);
    states[126] = new State(-114);
    states[127] = new State(-115);
    states[128] = new State(-116);
    states[129] = new State(-117);
    states[130] = new State(-74);
    states[131] = new State(new int[]{88,134,87,137,69,44,70,45},new int[]{-18,132});
    states[132] = new State(new int[]{64,133});
    states[133] = new State(-109);
    states[134] = new State(new int[]{69,44,70,45},new int[]{-18,135});
    states[135] = new State(new int[]{64,136});
    states[136] = new State(-110);
    states[137] = new State(new int[]{69,44,70,45},new int[]{-18,138});
    states[138] = new State(new int[]{64,139});
    states[139] = new State(-111);
    states[140] = new State(-75);
    states[141] = new State(new int[]{99,35,92,36,100,37,102,39,103,46,101,58,64,71,104,89,106,93,82,131,77,-67,78,-67,59,-67,41,-67,98,-67},new int[]{-25,142,-26,22,-13,23,-27,38,-28,57,-29,87,-30,88,-31,92,-32,130,-33,140});
    states[142] = new State(-65);
    states[143] = new State(-66);
    states[144] = new State(-59);
    states[145] = new State(new int[]{40,146,99,35,92,36,100,37,102,39,103,46,101,58,64,71,104,89,106,93,82,131,59,-67,98,-67},new int[]{-25,149,-26,22,-13,23,-27,38,-28,57,-29,87,-30,88,-31,92,-32,130,-33,140});
    states[146] = new State(new int[]{99,35,92,36,100,37,102,39,103,46,101,58,64,71,104,89,106,93,82,131,41,-67,77,-67,78,-67},new int[]{-24,147,-25,143,-26,22,-13,23,-27,38,-28,57,-29,87,-30,88,-31,92,-32,130,-33,140});
    states[147] = new State(new int[]{41,148,77,20,78,141});
    states[148] = new State(-60);
    states[149] = new State(-61);
    states[150] = new State(new int[]{77,20,78,141,59,-63,98,-63});
    states[151] = new State(new int[]{89,152});
    states[152] = new State(new int[]{64,153});
    states[153] = new State(-45);
    states[154] = new State(-141);
    states[155] = new State(-142);
    states[156] = new State(-143);
    states[157] = new State(-144);
    states[158] = new State(-145);
    states[159] = new State(new int[]{69,162,70,45},new int[]{-18,160});
    states[160] = new State(new int[]{107,8},new int[]{-17,161});
    states[161] = new State(-41);
    states[162] = new State(new int[]{93,164,107,-133},new int[]{-21,163});
    states[163] = new State(-48);
    states[164] = new State(new int[]{102,172,79,154,80,155,104,157,87,158},new int[]{-19,165});
    states[165] = new State(new int[]{64,166,91,167});
    states[166] = new State(-49);
    states[167] = new State(new int[]{64,168});
    states[168] = new State(new int[]{77,169,59,-50});
    states[169] = new State(new int[]{92,170});
    states[170] = new State(new int[]{64,171});
    states[171] = new State(-51);
    states[172] = new State(new int[]{85,173,64,-143,91,-143});
    states[173] = new State(new int[]{64,174});
    states[174] = new State(new int[]{58,175});
    states[175] = new State(new int[]{64,179},new int[]{-22,176,-23,181});
    states[176] = new State(new int[]{44,177,59,-52});
    states[177] = new State(new int[]{64,179},new int[]{-23,178});
    states[178] = new State(-53);
    states[179] = new State(new int[]{63,49,62,50},new int[]{-15,180});
    states[180] = new State(-55);
    states[181] = new State(-54);
    states[182] = new State(new int[]{59,183});
    states[183] = new State(-5);
    states[184] = new State(new int[]{83,186,93,164},new int[]{-21,185});
    states[185] = new State(-46);
    states[186] = new State(new int[]{64,187});
    states[187] = new State(-47);
    states[188] = new State(new int[]{59,189});
    states[189] = new State(-6);
    states[190] = new State(new int[]{68,191,86,194});
    states[191] = new State(new int[]{95,192});
    states[192] = new State(new int[]{68,193});
    states[193] = new State(-56);
    states[194] = new State(new int[]{82,195});
    states[195] = new State(new int[]{64,196});
    states[196] = new State(new int[]{90,197});
    states[197] = new State(new int[]{87,198});
    states[198] = new State(new int[]{69,199});
    states[199] = new State(new int[]{64,200});
    states[200] = new State(new int[]{77,201});
    states[201] = new State(new int[]{88,202});
    states[202] = new State(new int[]{69,203});
    states[203] = new State(new int[]{64,204});
    states[204] = new State(-30);
    states[205] = new State(new int[]{68,206});
    states[206] = new State(new int[]{97,207});
    states[207] = new State(new int[]{68,208});
    states[208] = new State(-57);
    states[209] = new State(new int[]{59,210});
    states[210] = new State(-7);
    states[211] = new State(new int[]{99,35,92,36,100,37,64,228,102,231},new int[]{-11,212,-12,234,-13,220});
    states[212] = new State(new int[]{98,213,44,218});
    states[213] = new State(new int[]{68,214});
    states[214] = new State(new int[]{105,215,59,-12});
    states[215] = new State(new int[]{84,216});
    states[216] = new State(new int[]{64,217});
    states[217] = new State(-13);
    states[218] = new State(new int[]{99,35,92,36,100,37,64,228,102,231},new int[]{-12,219,-13,220});
    states[219] = new State(-14);
    states[220] = new State(new int[]{95,221});
    states[221] = new State(new int[]{64,223,65,224,62,225,63,226,66,227},new int[]{-14,222});
    states[222] = new State(-16);
    states[223] = new State(-19);
    states[224] = new State(-20);
    states[225] = new State(-21);
    states[226] = new State(-22);
    states[227] = new State(-23);
    states[228] = new State(new int[]{95,229});
    states[229] = new State(new int[]{64,223,65,224,62,225,63,226,66,227},new int[]{-14,230});
    states[230] = new State(-17);
    states[231] = new State(new int[]{95,232});
    states[232] = new State(new int[]{68,233});
    states[233] = new State(-18);
    states[234] = new State(-15);
    states[235] = new State(new int[]{59,236});
    states[236] = new State(-8);
    states[237] = new State(new int[]{68,238,64,248,99,35,92,36,100,37},new int[]{-16,239,-13,249});
    states[238] = new State(-31);
    states[239] = new State(new int[]{97,240,44,245});
    states[240] = new State(new int[]{68,241});
    states[241] = new State(new int[]{95,242,59,-34});
    states[242] = new State(new int[]{81,243});
    states[243] = new State(new int[]{64,244});
    states[244] = new State(-35);
    states[245] = new State(new int[]{64,246,99,35,92,36,100,37},new int[]{-13,247});
    states[246] = new State(-36);
    states[247] = new State(-37);
    states[248] = new State(-38);
    states[249] = new State(-39);
    states[250] = new State(new int[]{68,251,109,252});
    states[251] = new State(-32);
    states[252] = new State(-148);
    states[253] = new State(new int[]{68,254});
    states[254] = new State(-33);
    states[255] = new State(new int[]{59,256});
    states[256] = new State(-9);
    states[257] = new State(new int[]{82,258});
    states[258] = new State(new int[]{97,259});
    states[259] = new State(new int[]{81,260});
    states[260] = new State(new int[]{64,261});
    states[261] = new State(-26);
    states[262] = new State(new int[]{82,263});
    states[263] = new State(-27);
    states[264] = new State(new int[]{82,265});
    states[265] = new State(-28);
    states[266] = new State(new int[]{82,267,109,271});
    states[267] = new State(new int[]{95,268});
    states[268] = new State(new int[]{81,269});
    states[269] = new State(new int[]{64,270});
    states[270] = new State(-29);
    states[271] = new State(new int[]{95,272});
    states[272] = new State(new int[]{81,273});
    states[273] = new State(new int[]{64,274});
    states[274] = new State(-149);
    states[275] = new State(new int[]{59,276});
    states[276] = new State(-10);
    states[277] = new State(new int[]{64,278});
    states[278] = new State(new int[]{58,279});
    states[279] = new State(new int[]{40,13,99,35,92,36,100,37,102,39,103,46,101,58,64,71,104,89,106,93,82,131,77,-67,78,-67,98,-67},new int[]{-20,280,-24,150,-25,143,-26,22,-13,23,-27,38,-28,57,-29,87,-30,88,-31,92,-32,130,-33,140});
    states[280] = new State(new int[]{98,281});
    states[281] = new State(new int[]{68,282,107,8},new int[]{-17,283});
    states[282] = new State(-146);
    states[283] = new State(-147);
    states[284] = new State(-11);
    states[285] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,61});
    rules[2] = new Rule(-1, new int[]{-1,-3});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-4,59});
    rules[5] = new Rule(-3, new int[]{-5,59});
    rules[6] = new Rule(-3, new int[]{-6,59});
    rules[7] = new Rule(-3, new int[]{-7,59});
    rules[8] = new Rule(-3, new int[]{-8,59});
    rules[9] = new Rule(-3, new int[]{-9,59});
    rules[10] = new Rule(-3, new int[]{-10,59});
    rules[11] = new Rule(-3, new int[]{60});
    rules[12] = new Rule(-7, new int[]{111,-11,98,68});
    rules[13] = new Rule(-7, new int[]{111,-11,98,68,105,84,64});
    rules[14] = new Rule(-11, new int[]{-11,44,-12});
    rules[15] = new Rule(-11, new int[]{-12});
    rules[16] = new Rule(-12, new int[]{-13,95,-14});
    rules[17] = new Rule(-12, new int[]{64,95,-14});
    rules[18] = new Rule(-12, new int[]{102,95,68});
    rules[19] = new Rule(-14, new int[]{64});
    rules[20] = new Rule(-14, new int[]{65});
    rules[21] = new Rule(-14, new int[]{62});
    rules[22] = new Rule(-14, new int[]{63});
    rules[23] = new Rule(-14, new int[]{66});
    rules[24] = new Rule(-15, new int[]{63});
    rules[25] = new Rule(-15, new int[]{62});
    rules[26] = new Rule(-9, new int[]{115,82,97,81,64});
    rules[27] = new Rule(-9, new int[]{116,82});
    rules[28] = new Rule(-9, new int[]{119,82});
    rules[29] = new Rule(-9, new int[]{117,82,95,81,64});
    rules[30] = new Rule(-9, new int[]{94,86,82,64,90,87,69,64,77,88,69,64});
    rules[31] = new Rule(-8, new int[]{113,68});
    rules[32] = new Rule(-8, new int[]{114,68});
    rules[33] = new Rule(-8, new int[]{118,68});
    rules[34] = new Rule(-8, new int[]{113,-16,97,68});
    rules[35] = new Rule(-8, new int[]{113,-16,97,68,95,81,64});
    rules[36] = new Rule(-16, new int[]{-16,44,64});
    rules[37] = new Rule(-16, new int[]{-16,44,-13});
    rules[38] = new Rule(-16, new int[]{64});
    rules[39] = new Rule(-16, new int[]{-13});
    rules[40] = new Rule(-4, new int[]{110,-17});
    rules[41] = new Rule(-4, new int[]{68,-18,-17});
    rules[42] = new Rule(-17, new int[]{107,-19});
    rules[43] = new Rule(-17, new int[]{107,-19,64});
    rules[44] = new Rule(-17, new int[]{107,-19,90,-20});
    rules[45] = new Rule(-17, new int[]{107,83,89,64});
    rules[46] = new Rule(-5, new int[]{112,-21});
    rules[47] = new Rule(-5, new int[]{112,83,64});
    rules[48] = new Rule(-5, new int[]{68,69,-21});
    rules[49] = new Rule(-21, new int[]{93,-19,64});
    rules[50] = new Rule(-21, new int[]{93,-19,91,64});
    rules[51] = new Rule(-21, new int[]{93,-19,91,64,77,92,64});
    rules[52] = new Rule(-21, new int[]{93,102,85,64,58,-22});
    rules[53] = new Rule(-22, new int[]{-22,44,-23});
    rules[54] = new Rule(-22, new int[]{-23});
    rules[55] = new Rule(-23, new int[]{64,-15});
    rules[56] = new Rule(-6, new int[]{94,68,95,68});
    rules[57] = new Rule(-6, new int[]{96,68,97,68});
    rules[58] = new Rule(-20, new int[]{40,-24,41,77,40,-24,41});
    rules[59] = new Rule(-20, new int[]{40,-24,41,77,-25});
    rules[60] = new Rule(-20, new int[]{40,-24,41,78,40,-24,41});
    rules[61] = new Rule(-20, new int[]{40,-24,41,78,-25});
    rules[62] = new Rule(-20, new int[]{40,-24,41});
    rules[63] = new Rule(-20, new int[]{-24});
    rules[64] = new Rule(-24, new int[]{-24,77,-25});
    rules[65] = new Rule(-24, new int[]{-24,78,-25});
    rules[66] = new Rule(-24, new int[]{-25});
    rules[67] = new Rule(-25, new int[]{});
    rules[68] = new Rule(-25, new int[]{-26});
    rules[69] = new Rule(-25, new int[]{-27});
    rules[70] = new Rule(-25, new int[]{-28});
    rules[71] = new Rule(-25, new int[]{-29});
    rules[72] = new Rule(-25, new int[]{-30});
    rules[73] = new Rule(-25, new int[]{-31});
    rules[74] = new Rule(-25, new int[]{-32});
    rules[75] = new Rule(-25, new int[]{-33});
    rules[76] = new Rule(-26, new int[]{-13,-18,64});
    rules[77] = new Rule(-26, new int[]{-13,-18,66});
    rules[78] = new Rule(-26, new int[]{-13,69,67});
    rules[79] = new Rule(-26, new int[]{-13,70,67});
    rules[80] = new Rule(-26, new int[]{-13,-34,64});
    rules[81] = new Rule(-13, new int[]{99});
    rules[82] = new Rule(-13, new int[]{92});
    rules[83] = new Rule(-13, new int[]{100});
    rules[84] = new Rule(-27, new int[]{102,-18,64});
    rules[85] = new Rule(-27, new int[]{102,-34,64});
    rules[86] = new Rule(-27, new int[]{103,-18,-15});
    rules[87] = new Rule(-27, new int[]{103,-35,-15});
    rules[88] = new Rule(-28, new int[]{101,-18,80});
    rules[89] = new Rule(-28, new int[]{101,-18,64});
    rules[90] = new Rule(-28, new int[]{101,-34,64});
    rules[91] = new Rule(-28, new int[]{101,-18,66});
    rules[92] = new Rule(-28, new int[]{101,70,67});
    rules[93] = new Rule(-28, new int[]{101,69,67});
    rules[94] = new Rule(-28, new int[]{101,-29});
    rules[95] = new Rule(-28, new int[]{101,-26});
    rules[96] = new Rule(-30, new int[]{104,-29});
    rules[97] = new Rule(-30, new int[]{104,-26});
    rules[98] = new Rule(-29, new int[]{64,-18,62});
    rules[99] = new Rule(-29, new int[]{64,-35,62});
    rules[100] = new Rule(-29, new int[]{64,-18,63});
    rules[101] = new Rule(-29, new int[]{64,-35,63});
    rules[102] = new Rule(-29, new int[]{64,-18,64});
    rules[103] = new Rule(-29, new int[]{64,-34,64});
    rules[104] = new Rule(-29, new int[]{64,-18,65});
    rules[105] = new Rule(-29, new int[]{64,-18,66});
    rules[106] = new Rule(-29, new int[]{64,70,67});
    rules[107] = new Rule(-29, new int[]{64,69,67});
    rules[108] = new Rule(-31, new int[]{106,-18,-36,68});
    rules[109] = new Rule(-32, new int[]{82,-18,64});
    rules[110] = new Rule(-32, new int[]{82,88,-18,64});
    rules[111] = new Rule(-32, new int[]{82,87,-18,64});
    rules[112] = new Rule(-33, new int[]{106,69,-37,105,82,64});
    rules[113] = new Rule(-33, new int[]{106,-18,105,82,64,77,106,-18,105,82,64});
    rules[114] = new Rule(-37, new int[]{135});
    rules[115] = new Rule(-37, new int[]{136});
    rules[116] = new Rule(-37, new int[]{137});
    rules[117] = new Rule(-37, new int[]{138});
    rules[118] = new Rule(-36, new int[]{120});
    rules[119] = new Rule(-36, new int[]{121});
    rules[120] = new Rule(-36, new int[]{122});
    rules[121] = new Rule(-36, new int[]{123});
    rules[122] = new Rule(-36, new int[]{124});
    rules[123] = new Rule(-36, new int[]{125});
    rules[124] = new Rule(-36, new int[]{126});
    rules[125] = new Rule(-36, new int[]{127});
    rules[126] = new Rule(-36, new int[]{128});
    rules[127] = new Rule(-36, new int[]{129});
    rules[128] = new Rule(-36, new int[]{130});
    rules[129] = new Rule(-36, new int[]{131});
    rules[130] = new Rule(-36, new int[]{75});
    rules[131] = new Rule(-36, new int[]{133});
    rules[132] = new Rule(-36, new int[]{134});
    rules[133] = new Rule(-18, new int[]{69});
    rules[134] = new Rule(-18, new int[]{70});
    rules[135] = new Rule(-35, new int[]{71});
    rules[136] = new Rule(-35, new int[]{72});
    rules[137] = new Rule(-35, new int[]{73});
    rules[138] = new Rule(-35, new int[]{74});
    rules[139] = new Rule(-34, new int[]{75});
    rules[140] = new Rule(-34, new int[]{76});
    rules[141] = new Rule(-19, new int[]{79});
    rules[142] = new Rule(-19, new int[]{80});
    rules[143] = new Rule(-19, new int[]{102});
    rules[144] = new Rule(-19, new int[]{104});
    rules[145] = new Rule(-19, new int[]{87});
    rules[146] = new Rule(-10, new int[]{109,64,58,-20,98,68});
    rules[147] = new Rule(-10, new int[]{109,64,58,-20,98,-17});
    rules[148] = new Rule(-10, new int[]{114,109});
    rules[149] = new Rule(-10, new int[]{117,109,95,81,64});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 12: // attr_setting -> SET, value_setting_list, FOR, IDENTIFIER
#line 130 "Parser.y"
{EvaluateSetExpression(ValueStack[ValueStack.Depth-1].strVal, ((List<Expression>)(ValueStack[ValueStack.Depth-3].val)));}
        break;
      case 13: // attr_setting -> SET, value_setting_list, FOR, IDENTIFIER, IN, PROPERTY_SET, 
               //                 STRING
#line 131 "Parser.y"
{EvaluateSetExpression(ValueStack[ValueStack.Depth-4].strVal, ((List<Expression>)(ValueStack[ValueStack.Depth-6].val)), ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 14: // value_setting_list -> value_setting_list, ',', value_setting
#line 135 "Parser.y"
{((List<Expression>)(ValueStack[ValueStack.Depth-3].val)).Add((Expression)(ValueStack[ValueStack.Depth-1].val)); CurrentSemanticValue.val = ValueStack[ValueStack.Depth-3].val;}
        break;
      case 15: // value_setting_list -> value_setting
#line 136 "Parser.y"
{CurrentSemanticValue.val = new List<Expression>(){((Expression)(ValueStack[ValueStack.Depth-1].val))};}
        break;
      case 16: // value_setting -> attribute, TO, value
#line 140 "Parser.y"
{CurrentSemanticValue.val = GenerateSetExpression(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].val);}
        break;
      case 17: // value_setting -> STRING, TO, value
#line 141 "Parser.y"
{CurrentSemanticValue.val = GenerateSetExpression(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].val);}
        break;
      case 18: // value_setting -> MATERIAL, TO, IDENTIFIER
#line 142 "Parser.y"
{CurrentSemanticValue.val = GenerateSetMaterialExpression(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 19: // value -> STRING
#line 146 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].strVal;}
        break;
      case 20: // value -> BOOLEAN
#line 147 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].boolVal;}
        break;
      case 21: // value -> INTEGER
#line 148 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].intVal;}
        break;
      case 22: // value -> DOUBLE
#line 149 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].doubleVal;}
        break;
      case 23: // value -> NONDEF
#line 150 "Parser.y"
{CurrentSemanticValue.val = null;}
        break;
      case 24: // num_value -> DOUBLE
#line 154 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].doubleVal;}
        break;
      case 25: // num_value -> INTEGER
#line 155 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].intVal;}
        break;
      case 26: // model_actions -> OPEN, MODEL, FROM, FILE, STRING
#line 159 "Parser.y"
{OpenModel(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 27: // model_actions -> CLOSE, MODEL
#line 160 "Parser.y"
{CloseModel();}
        break;
      case 28: // model_actions -> VALIDATE, MODEL
#line 161 "Parser.y"
{ValidateModel();}
        break;
      case 29: // model_actions -> SAVE, MODEL, TO, FILE, STRING
#line 162 "Parser.y"
{SaveModel(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 30: // model_actions -> ADD, REFERENCE, MODEL, STRING, WHERE, ORGANIZATION, OP_EQ, 
               //                  STRING, OP_AND, OWNER, OP_EQ, STRING
#line 163 "Parser.y"
{AddReferenceModel(ValueStack[ValueStack.Depth-9].strVal, ValueStack[ValueStack.Depth-5].strVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 31: // variables_actions -> DUMP, IDENTIFIER
#line 168 "Parser.y"
{DumpIdentifier(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 32: // variables_actions -> CLEAR, IDENTIFIER
#line 169 "Parser.y"
{ClearIdentifier(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 33: // variables_actions -> COUNT, IDENTIFIER
#line 170 "Parser.y"
{CountIdentifier(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 34: // variables_actions -> DUMP, string_list, FROM, IDENTIFIER
#line 171 "Parser.y"
{DumpAttributes(ValueStack[ValueStack.Depth-1].strVal, ((List<string>)(ValueStack[ValueStack.Depth-3].val)));}
        break;
      case 35: // variables_actions -> DUMP, string_list, FROM, IDENTIFIER, TO, FILE, STRING
#line 172 "Parser.y"
{DumpAttributes(ValueStack[ValueStack.Depth-4].strVal, ((List<string>)(ValueStack[ValueStack.Depth-6].val)), ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 36: // string_list -> string_list, ',', STRING
#line 176 "Parser.y"
{((List<string>)(ValueStack[ValueStack.Depth-3].val)).Add(ValueStack[ValueStack.Depth-1].strVal); CurrentSemanticValue.val = ValueStack[ValueStack.Depth-3].val;}
        break;
      case 37: // string_list -> string_list, ',', attribute
#line 177 "Parser.y"
{((List<string>)(ValueStack[ValueStack.Depth-3].val)).Add(ValueStack[ValueStack.Depth-1].strVal); CurrentSemanticValue.val = ValueStack[ValueStack.Depth-3].val;}
        break;
      case 38: // string_list -> STRING
#line 178 "Parser.y"
{CurrentSemanticValue.val = new List<string>(){ValueStack[ValueStack.Depth-1].strVal};}
        break;
      case 39: // string_list -> attribute
#line 179 "Parser.y"
{CurrentSemanticValue.val = new List<string>(){ValueStack[ValueStack.Depth-1].strVal};}
        break;
      case 40: // selection -> SELECT, selection_statement
#line 183 "Parser.y"
{Variables.Set("$$", ((IEnumerable<IPersistIfcEntity>)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 41: // selection -> IDENTIFIER, op_bool, selection_statement
#line 184 "Parser.y"
{AddOrRemoveFromSelection(ValueStack[ValueStack.Depth-3].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)), ValueStack[ValueStack.Depth-1].val);}
        break;
      case 42: // selection_statement -> EVERY, object
#line 188 "Parser.y"
{CurrentSemanticValue.val = Select(ValueStack[ValueStack.Depth-1].typeVal);}
        break;
      case 43: // selection_statement -> EVERY, object, STRING
#line 189 "Parser.y"
{CurrentSemanticValue.val = Select(ValueStack[ValueStack.Depth-2].typeVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 44: // selection_statement -> EVERY, object, WHERE, conditions_set
#line 190 "Parser.y"
{CurrentSemanticValue.val = Select(ValueStack[ValueStack.Depth-3].typeVal, ((Expression)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 45: // selection_statement -> EVERY, CLASSIFICATION, CODE, STRING
#line 191 "Parser.y"
{CurrentSemanticValue.val = SelectClassification(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 46: // creation -> CREATE, creation_statement
#line 195 "Parser.y"
{Variables.Set("$$", ((IPersistIfcEntity)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 47: // creation -> CREATE, CLASSIFICATION, STRING
#line 196 "Parser.y"
{CreateClassification(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 48: // creation -> IDENTIFIER, OP_EQ, creation_statement
#line 197 "Parser.y"
{Variables.Set(ValueStack[ValueStack.Depth-3].strVal, ((IPersistIfcEntity)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 49: // creation_statement -> NEW, object, STRING
#line 201 "Parser.y"
{CurrentSemanticValue.val = CreateObject(ValueStack[ValueStack.Depth-2].typeVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 50: // creation_statement -> NEW, object, WITH_NAME, STRING
#line 202 "Parser.y"
{CurrentSemanticValue.val = CreateObject(ValueStack[ValueStack.Depth-3].typeVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 51: // creation_statement -> NEW, object, WITH_NAME, STRING, OP_AND, DESCRIPTION, 
               //                       STRING
#line 203 "Parser.y"
{CurrentSemanticValue.val = CreateObject(ValueStack[ValueStack.Depth-6].typeVal, ValueStack[ValueStack.Depth-4].strVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 52: // creation_statement -> NEW, MATERIAL, LAYER_SET, STRING, ':', layers
#line 204 "Parser.y"
{CurrentSemanticValue.val = CreateLayerSet(ValueStack[ValueStack.Depth-3].strVal, (List<Layer>)(ValueStack[ValueStack.Depth-1].val));}
        break;
      case 53: // layers -> layers, ',', layer
#line 208 "Parser.y"
{((List<Layer>)(ValueStack[ValueStack.Depth-3].val)).Add((Layer)(ValueStack[ValueStack.Depth-1].val)); CurrentSemanticValue.val = ValueStack[ValueStack.Depth-3].val;}
        break;
      case 54: // layers -> layer
#line 209 "Parser.y"
{CurrentSemanticValue.val = new List<Layer>(){(Layer)(ValueStack[ValueStack.Depth-1].val)};}
        break;
      case 55: // layer -> STRING, num_value
#line 213 "Parser.y"
{CurrentSemanticValue.val = new Layer(){material = ValueStack[ValueStack.Depth-2].strVal, thickness = Convert.ToDouble(ValueStack[ValueStack.Depth-1].val)};}
        break;
      case 56: // addition -> ADD, IDENTIFIER, TO, IDENTIFIER
#line 217 "Parser.y"
{AddOrRemove(Tokens.ADD, ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 57: // addition -> REMOVE, IDENTIFIER, FROM, IDENTIFIER
#line 218 "Parser.y"
{AddOrRemove(Tokens.REMOVE, ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 58: // conditions_set -> '(', conditions, ')', OP_AND, '(', conditions, ')'
#line 222 "Parser.y"
{CurrentSemanticValue.val = Expression.AndAlso(((Expression)(ValueStack[ValueStack.Depth-6].val)), ((Expression)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 59: // conditions_set -> '(', conditions, ')', OP_AND, condition
#line 223 "Parser.y"
{CurrentSemanticValue.val = Expression.AndAlso(((Expression)(ValueStack[ValueStack.Depth-4].val)), ((Expression)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 60: // conditions_set -> '(', conditions, ')', OP_OR, '(', conditions, ')'
#line 224 "Parser.y"
{CurrentSemanticValue.val = Expression.OrElse(((Expression)(ValueStack[ValueStack.Depth-6].val)), ((Expression)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 61: // conditions_set -> '(', conditions, ')', OP_OR, condition
#line 225 "Parser.y"
{CurrentSemanticValue.val = Expression.OrElse(((Expression)(ValueStack[ValueStack.Depth-4].val)), ((Expression)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 62: // conditions_set -> '(', conditions, ')'
#line 226 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val;}
        break;
      case 63: // conditions_set -> conditions
#line 227 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 64: // conditions -> conditions, OP_AND, condition
#line 231 "Parser.y"
{CurrentSemanticValue.val = Expression.AndAlso(((Expression)(ValueStack[ValueStack.Depth-3].val)), ((Expression)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 65: // conditions -> conditions, OP_OR, condition
#line 232 "Parser.y"
{CurrentSemanticValue.val = Expression.OrElse(((Expression)(ValueStack[ValueStack.Depth-3].val)), ((Expression)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 66: // conditions -> condition
#line 233 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 68: // condition -> attributeCondition
#line 238 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 69: // condition -> materialCondition
#line 239 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 70: // condition -> typeCondition
#line 240 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 71: // condition -> propertyCondition
#line 241 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 72: // condition -> groupCondition
#line 242 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 73: // condition -> spatialCondition
#line 243 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 74: // condition -> modelCondition
#line 244 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 75: // condition -> existanceCondition
#line 245 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 76: // attributeCondition -> attribute, op_bool, STRING
#line 249 "Parser.y"
{CurrentSemanticValue.val = GenerateAttributeCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 77: // attributeCondition -> attribute, op_bool, NONDEF
#line 250 "Parser.y"
{CurrentSemanticValue.val = GenerateAttributeCondition(ValueStack[ValueStack.Depth-3].strVal, null, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 78: // attributeCondition -> attribute, OP_EQ, DEFINED
#line 251 "Parser.y"
{CurrentSemanticValue.val = GenerateAttributeCondition(ValueStack[ValueStack.Depth-3].strVal, null, Tokens.OP_NEQ); }
        break;
      case 79: // attributeCondition -> attribute, OP_NEQ, DEFINED
#line 252 "Parser.y"
{CurrentSemanticValue.val = GenerateAttributeCondition(ValueStack[ValueStack.Depth-3].strVal, null, Tokens.OP_EQ); }
        break;
      case 80: // attributeCondition -> attribute, op_cont, STRING
#line 253 "Parser.y"
{CurrentSemanticValue.val = GenerateAttributeCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 81: // attribute -> NAME
#line 257 "Parser.y"
{CurrentSemanticValue.strVal = "Name";}
        break;
      case 82: // attribute -> DESCRIPTION
#line 258 "Parser.y"
{CurrentSemanticValue.strVal = "Description";}
        break;
      case 83: // attribute -> PREDEFINED_TYPE
#line 259 "Parser.y"
{CurrentSemanticValue.strVal = "PredefinedType";}
        break;
      case 84: // materialCondition -> MATERIAL, op_bool, STRING
#line 263 "Parser.y"
{CurrentSemanticValue.val = GenerateMaterialCondition(ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 85: // materialCondition -> MATERIAL, op_cont, STRING
#line 264 "Parser.y"
{CurrentSemanticValue.val = GenerateMaterialCondition(ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 86: // materialCondition -> THICKNESS, op_bool, num_value
#line 266 "Parser.y"
{CurrentSemanticValue.val = GenerateThicknessCondition(Convert.ToDouble(ValueStack[ValueStack.Depth-1].val), ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 87: // materialCondition -> THICKNESS, op_num_rel, num_value
#line 267 "Parser.y"
{CurrentSemanticValue.val = GenerateThicknessCondition(Convert.ToDouble(ValueStack[ValueStack.Depth-1].val), ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 88: // typeCondition -> TYPE, op_bool, PRODUCT_TYPE
#line 271 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectTypeCondition(ValueStack[ValueStack.Depth-1].typeVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 89: // typeCondition -> TYPE, op_bool, STRING
#line 272 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectNameCondition(ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 90: // typeCondition -> TYPE, op_cont, STRING
#line 273 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectNameCondition(ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 91: // typeCondition -> TYPE, op_bool, NONDEF
#line 274 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectTypeCondition(null, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 92: // typeCondition -> TYPE, OP_NEQ, DEFINED
#line 275 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectTypeCondition(null, Tokens.OP_EQ);}
        break;
      case 93: // typeCondition -> TYPE, OP_EQ, DEFINED
#line 276 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectTypeCondition(null, Tokens.OP_NEQ);}
        break;
      case 94: // typeCondition -> TYPE, propertyCondition
#line 277 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeCondition((Expression)(ValueStack[ValueStack.Depth-1].val));}
        break;
      case 95: // typeCondition -> TYPE, attributeCondition
#line 278 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeCondition((Expression)(ValueStack[ValueStack.Depth-1].val));}
        break;
      case 96: // groupCondition -> GROUP, propertyCondition
#line 282 "Parser.y"
{CurrentSemanticValue.val = GenerateGroupCondition((Expression)(ValueStack[ValueStack.Depth-1].val));}
        break;
      case 97: // groupCondition -> GROUP, attributeCondition
#line 283 "Parser.y"
{CurrentSemanticValue.val = GenerateGroupCondition((Expression)(ValueStack[ValueStack.Depth-1].val));}
        break;
      case 98: // propertyCondition -> STRING, op_bool, INTEGER
#line 287 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].intVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 99: // propertyCondition -> STRING, op_num_rel, INTEGER
#line 288 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].intVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 100: // propertyCondition -> STRING, op_bool, DOUBLE
#line 290 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].doubleVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 101: // propertyCondition -> STRING, op_num_rel, DOUBLE
#line 291 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].doubleVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 102: // propertyCondition -> STRING, op_bool, STRING
#line 293 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 103: // propertyCondition -> STRING, op_cont, STRING
#line 294 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 104: // propertyCondition -> STRING, op_bool, BOOLEAN
#line 296 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].boolVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 105: // propertyCondition -> STRING, op_bool, NONDEF
#line 297 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, null, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 106: // propertyCondition -> STRING, OP_NEQ, DEFINED
#line 298 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, null, Tokens.OP_EQ);}
        break;
      case 107: // propertyCondition -> STRING, OP_EQ, DEFINED
#line 299 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, null, Tokens.OP_NEQ);}
        break;
      case 108: // spatialCondition -> IT, op_bool, op_spatial, IDENTIFIER
#line 303 "Parser.y"
{CurrentSemanticValue.val = GenerateSpatialCondition((Tokens)(ValueStack[ValueStack.Depth-3].val), (Tokens)(ValueStack[ValueStack.Depth-2].val), ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 109: // modelCondition -> MODEL, op_bool, STRING
#line 307 "Parser.y"
{CurrentSemanticValue.val = GenerateModelCondition(Tokens.MODEL, (Tokens)(ValueStack[ValueStack.Depth-2].val), ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 110: // modelCondition -> MODEL, OWNER, op_bool, STRING
#line 308 "Parser.y"
{CurrentSemanticValue.val = GenerateModelCondition(Tokens.OWNER, (Tokens)(ValueStack[ValueStack.Depth-2].val), ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 111: // modelCondition -> MODEL, ORGANIZATION, op_bool, STRING
#line 309 "Parser.y"
{CurrentSemanticValue.val = GenerateModelCondition(Tokens.ORGANIZATION, (Tokens)(ValueStack[ValueStack.Depth-2].val), ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 112: // existanceCondition -> IT, OP_EQ, op_existance, IN, MODEL, STRING
#line 313 "Parser.y"
{CurrentSemanticValue.val = GenerateExistanceCondition((Tokens)(ValueStack[ValueStack.Depth-4].val), ValueStack[ValueStack.Depth-1].strVal); }
        break;
      case 113: // existanceCondition -> IT, op_bool, IN, MODEL, STRING, OP_AND, IT, op_bool, IN, 
                //                       MODEL, STRING
#line 314 "Parser.y"
{CurrentSemanticValue.val = GenerateExistanceCondition((Tokens)(ValueStack[ValueStack.Depth-10].val), ValueStack[ValueStack.Depth-7].strVal, (Tokens)(ValueStack[ValueStack.Depth-4].val), ValueStack[ValueStack.Depth-1].strVal); }
        break;
      case 114: // op_existance -> THE_SAME
#line 318 "Parser.y"
{ CurrentSemanticValue.val = Tokens.THE_SAME; }
        break;
      case 115: // op_existance -> DELETED
#line 319 "Parser.y"
{ CurrentSemanticValue.val = Tokens.DELETED; }
        break;
      case 116: // op_existance -> INSERTED
#line 320 "Parser.y"
{ CurrentSemanticValue.val = Tokens.INSERTED;}
        break;
      case 117: // op_existance -> EDITED
#line 321 "Parser.y"
{ CurrentSemanticValue.val = Tokens.EDITED;}
        break;
      case 118: // op_spatial -> NORTH_OF
#line 325 "Parser.y"
{CurrentSemanticValue.val = Tokens.NORTH_OF			;}
        break;
      case 119: // op_spatial -> SOUTH_OF
#line 326 "Parser.y"
{CurrentSemanticValue.val = Tokens.SOUTH_OF			;}
        break;
      case 120: // op_spatial -> WEST_OF
#line 327 "Parser.y"
{CurrentSemanticValue.val = Tokens.WEST_OF			;}
        break;
      case 121: // op_spatial -> EAST_OF
#line 328 "Parser.y"
{CurrentSemanticValue.val = Tokens.EAST_OF			;}
        break;
      case 122: // op_spatial -> ABOVE
#line 329 "Parser.y"
{CurrentSemanticValue.val = Tokens.ABOVE				;}
        break;
      case 123: // op_spatial -> BELOW
#line 330 "Parser.y"
{CurrentSemanticValue.val = Tokens.BELOW				;}
        break;
      case 124: // op_spatial -> SPATIALLY_EQUALS
#line 331 "Parser.y"
{CurrentSemanticValue.val = Tokens.SPATIALLY_EQUALS	;}
        break;
      case 125: // op_spatial -> DISJOINT
#line 332 "Parser.y"
{CurrentSemanticValue.val = Tokens.DISJOINT			;}
        break;
      case 126: // op_spatial -> INTERSECTS
#line 333 "Parser.y"
{CurrentSemanticValue.val = Tokens.INTERSECTS			;}
        break;
      case 127: // op_spatial -> TOUCHES
#line 334 "Parser.y"
{CurrentSemanticValue.val = Tokens.TOUCHES			;}
        break;
      case 128: // op_spatial -> CROSSES
#line 335 "Parser.y"
{CurrentSemanticValue.val = Tokens.CROSSES			;}
        break;
      case 129: // op_spatial -> WITHIN
#line 336 "Parser.y"
{CurrentSemanticValue.val = Tokens.WITHIN				;}
        break;
      case 130: // op_spatial -> OP_CONTAINS
#line 337 "Parser.y"
{CurrentSemanticValue.val = Tokens.SPATIALLY_CONTAINS	;}
        break;
      case 131: // op_spatial -> OVERLAPS
#line 338 "Parser.y"
{CurrentSemanticValue.val = Tokens.OVERLAPS			;}
        break;
      case 132: // op_spatial -> RELATE
#line 339 "Parser.y"
{CurrentSemanticValue.val = Tokens.RELATE				;}
        break;
      case 133: // op_bool -> OP_EQ
#line 343 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_EQ;}
        break;
      case 134: // op_bool -> OP_NEQ
#line 344 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_NEQ;}
        break;
      case 135: // op_num_rel -> OP_GT
#line 348 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_GT;}
        break;
      case 136: // op_num_rel -> OP_LT
#line 349 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_LT;}
        break;
      case 137: // op_num_rel -> OP_GTE
#line 350 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_GTE;}
        break;
      case 138: // op_num_rel -> OP_LTQ
#line 351 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_LTQ;}
        break;
      case 139: // op_cont -> OP_CONTAINS
#line 355 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_CONTAINS;}
        break;
      case 140: // op_cont -> OP_NOT_CONTAINS
#line 356 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_NOT_CONTAINS;}
        break;
      case 141: // object -> PRODUCT
#line 360 "Parser.y"
{CurrentSemanticValue.typeVal = ValueStack[ValueStack.Depth-1].typeVal;}
        break;
      case 142: // object -> PRODUCT_TYPE
#line 361 "Parser.y"
{CurrentSemanticValue.typeVal = ValueStack[ValueStack.Depth-1].typeVal;}
        break;
      case 143: // object -> MATERIAL
#line 362 "Parser.y"
{CurrentSemanticValue.typeVal = ValueStack[ValueStack.Depth-1].typeVal;}
        break;
      case 144: // object -> GROUP
#line 363 "Parser.y"
{CurrentSemanticValue.typeVal = ValueStack[ValueStack.Depth-1].typeVal;}
        break;
      case 145: // object -> ORGANIZATION
#line 364 "Parser.y"
{CurrentSemanticValue.typeVal = ValueStack[ValueStack.Depth-1].typeVal;}
        break;
      case 146: // rule_check -> RULE, STRING, ':', conditions_set, FOR, IDENTIFIER
#line 368 "Parser.y"
{ CheckRule(ValueStack[ValueStack.Depth-5].strVal, (Expression)(ValueStack[ValueStack.Depth-3].val), ValueStack[ValueStack.Depth-1].strVal); }
        break;
      case 147: // rule_check -> RULE, STRING, ':', conditions_set, FOR, selection_statement
#line 369 "Parser.y"
{ CheckRule(ValueStack[ValueStack.Depth-5].strVal, (Expression)(ValueStack[ValueStack.Depth-3].val), (IEnumerable<IPersistIfcEntity>)(ValueStack[ValueStack.Depth-1].val)); }
        break;
      case 148: // rule_check -> CLEAR, RULE
#line 370 "Parser.y"
{ ClearRules(); }
        break;
      case 149: // rule_check -> SAVE, RULE, TO, FILE, STRING
#line 371 "Parser.y"
{ SaveRules(ValueStack[ValueStack.Depth-1].strVal); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
