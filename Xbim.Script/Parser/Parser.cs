// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  CENTAURUS
// DateTime: 17.9.2013 19:23:37
// UserName: Martin
// Input file <Parser.y - 17.9.2013 18:18:06>

// options: conflicts lines gplex conflicts listing

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Xbim.Gppg;
using Xbim.XbimExtensions.Interfaces;
using System.Linq.Expressions;

namespace Xbim.Script
{
internal enum Tokens {error=60,
    EOF=61,INTEGER=62,DOUBLE=63,STRING=64,BOOLEAN=65,NONDEF=66,
    DEFINED=67,IDENTIFIER=68,OP_EQ=69,OP_NEQ=70,OP_GT=71,OP_LT=72,
    OP_GTE=73,OP_LTQ=74,OP_CONTAINS=75,OP_NOT_CONTAINS=76,OP_AND=77,OP_OR=78,
    PRODUCT=79,PRODUCT_TYPE=80,FILE=81,MODEL=82,CLASSIFICATION=83,WHERE=84,
    WITH_NAME=85,DESCRIPTION=86,NEW=87,ADD=88,TO=89,REMOVE=90,
    FROM=91,FOR=92,NAME=93,PREDEFINED_TYPE=94,TYPE=95,MATERIAL=96,
    THICKNESS=97,GROUP=98,SELECT=99,SET=100,CREATE=101,DUMP=102,
    CLEAR=103,OPEN=104,CLOSE=105,SAVE=106};

internal partial struct ValueType
#line 15 "Parser.y"
{
#line 16 "Parser.y"
		public string strVal;
#line 17 "Parser.y"
		public int intVal;
#line 18 "Parser.y"
		public double doubleVal;
#line 19 "Parser.y"
		public bool boolVal;
#line 20 "Parser.y"
		public Type typeVal;
#line 21 "Parser.y"
		public object val;
#line 22 "Parser.y"
	  }
// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from Parser.y - 17.9.2013 18:18:06
#line 2 "Parser.y"
	
  // End verbatim content from Parser.y - 17.9.2013 18:18:06

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[98];
  private static State[] states = new State[169];
  private static string[] nonTerms = new string[] {
      "expressions", "$accept", "expression", "selection", "creation", "addition", 
      "attr_setting", "variables_actions", "model_actions", "value_setting_list", 
      "value_setting", "attribute", "value", "num_value", "string_list", "selection_statement", 
      "op_bool", "object", "conditions", "creation_statement", "condition", "attributeCondition", 
      "materialCondition", "typeCondition", "propertyCondition", "groupCondition", 
      "op_cont", "op_num_rel", };

  static Parser() {
    states[0] = new State(new int[]{99,6,68,87,101,102,88,108,90,112,100,118,102,138,103,151,104,155,105,160,106,162,60,167},new int[]{-1,1,-3,168,-4,4,-5,100,-6,106,-7,116,-8,136,-9,153});
    states[1] = new State(new int[]{61,2,99,6,68,87,101,102,88,108,90,112,100,118,102,138,103,151,104,155,105,160,106,162,60,167},new int[]{-3,3,-4,4,-5,100,-6,106,-7,116,-8,136,-9,153});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{59,5});
    states[5] = new State(-4);
    states[6] = new State(new int[]{79,83,80,84,96,85,98,86},new int[]{-16,7,-18,8});
    states[7] = new State(-34);
    states[8] = new State(new int[]{64,9,84,10,59,-36});
    states[9] = new State(-37);
    states[10] = new State(new int[]{93,25,86,26,94,27,96,29,97,34,95,46,64,59,98,77,77,-50,78,-50,59,-50},new int[]{-19,11,-21,82,-22,14,-12,15,-23,28,-24,45,-25,75,-26,76});
    states[11] = new State(new int[]{77,12,78,80,59,-38});
    states[12] = new State(new int[]{93,25,86,26,94,27,96,29,97,34,95,46,64,59,98,77,77,-50,78,-50,59,-50},new int[]{-21,13,-22,14,-12,15,-23,28,-24,45,-25,75,-26,76});
    states[13] = new State(-47);
    states[14] = new State(-51);
    states[15] = new State(new int[]{69,21,70,22,75,23,76,24},new int[]{-17,16,-27,19});
    states[16] = new State(new int[]{64,17,66,18});
    states[17] = new State(-56);
    states[18] = new State(-57);
    states[19] = new State(new int[]{64,20});
    states[20] = new State(-58);
    states[21] = new State(-86);
    states[22] = new State(-87);
    states[23] = new State(-92);
    states[24] = new State(-93);
    states[25] = new State(-59);
    states[26] = new State(-60);
    states[27] = new State(-61);
    states[28] = new State(-52);
    states[29] = new State(new int[]{69,21,70,22,75,23,76,24},new int[]{-17,30,-27,32});
    states[30] = new State(new int[]{64,31});
    states[31] = new State(-62);
    states[32] = new State(new int[]{64,33});
    states[33] = new State(-63);
    states[34] = new State(new int[]{69,21,70,22,71,41,72,42,73,43,74,44},new int[]{-17,35,-28,39});
    states[35] = new State(new int[]{63,37,62,38},new int[]{-14,36});
    states[36] = new State(-64);
    states[37] = new State(-21);
    states[38] = new State(-22);
    states[39] = new State(new int[]{63,37,62,38},new int[]{-14,40});
    states[40] = new State(-65);
    states[41] = new State(-88);
    states[42] = new State(-89);
    states[43] = new State(-90);
    states[44] = new State(-91);
    states[45] = new State(-53);
    states[46] = new State(new int[]{70,53,69,55,75,23,76,24,64,59,93,25,86,26,94,27},new int[]{-17,47,-27,51,-25,57,-22,58,-12,15});
    states[47] = new State(new int[]{80,48,64,49,66,50});
    states[48] = new State(-66);
    states[49] = new State(-67);
    states[50] = new State(-69);
    states[51] = new State(new int[]{64,52});
    states[52] = new State(-68);
    states[53] = new State(new int[]{67,54,80,-87,64,-87,66,-87});
    states[54] = new State(-70);
    states[55] = new State(new int[]{67,56,80,-86,64,-86,66,-86});
    states[56] = new State(-71);
    states[57] = new State(-72);
    states[58] = new State(-73);
    states[59] = new State(new int[]{70,71,69,73,71,41,72,42,73,43,74,44,75,23,76,24},new int[]{-17,60,-28,66,-27,69});
    states[60] = new State(new int[]{62,61,63,62,64,63,65,64,66,65});
    states[61] = new State(-76);
    states[62] = new State(-78);
    states[63] = new State(-80);
    states[64] = new State(-82);
    states[65] = new State(-83);
    states[66] = new State(new int[]{62,67,63,68});
    states[67] = new State(-77);
    states[68] = new State(-79);
    states[69] = new State(new int[]{64,70});
    states[70] = new State(-81);
    states[71] = new State(new int[]{67,72,62,-87,63,-87,64,-87,65,-87,66,-87});
    states[72] = new State(-84);
    states[73] = new State(new int[]{67,74,62,-86,63,-86,64,-86,65,-86,66,-86});
    states[74] = new State(-85);
    states[75] = new State(-54);
    states[76] = new State(-55);
    states[77] = new State(new int[]{64,59,93,25,86,26,94,27},new int[]{-25,78,-22,79,-12,15});
    states[78] = new State(-74);
    states[79] = new State(-75);
    states[80] = new State(new int[]{93,25,86,26,94,27,96,29,97,34,95,46,64,59,98,77,77,-50,78,-50,59,-50},new int[]{-21,81,-22,14,-12,15,-23,28,-24,45,-25,75,-26,76});
    states[81] = new State(-48);
    states[82] = new State(-49);
    states[83] = new State(-94);
    states[84] = new State(-95);
    states[85] = new State(-96);
    states[86] = new State(-97);
    states[87] = new State(new int[]{69,90,70,22},new int[]{-17,88});
    states[88] = new State(new int[]{79,83,80,84,96,85,98,86},new int[]{-16,89,-18,8});
    states[89] = new State(-35);
    states[90] = new State(new int[]{87,92,79,-86,80,-86,96,-86,98,-86},new int[]{-20,91});
    states[91] = new State(-41);
    states[92] = new State(new int[]{79,83,80,84,96,85,98,86},new int[]{-18,93});
    states[93] = new State(new int[]{64,94,85,95});
    states[94] = new State(-42);
    states[95] = new State(new int[]{64,96});
    states[96] = new State(new int[]{77,97,59,-43});
    states[97] = new State(new int[]{86,98});
    states[98] = new State(new int[]{64,99});
    states[99] = new State(-44);
    states[100] = new State(new int[]{59,101});
    states[101] = new State(-5);
    states[102] = new State(new int[]{83,104,87,92},new int[]{-20,103});
    states[103] = new State(-39);
    states[104] = new State(new int[]{64,105});
    states[105] = new State(-40);
    states[106] = new State(new int[]{59,107});
    states[107] = new State(-6);
    states[108] = new State(new int[]{68,109});
    states[109] = new State(new int[]{89,110});
    states[110] = new State(new int[]{68,111});
    states[111] = new State(-45);
    states[112] = new State(new int[]{68,113});
    states[113] = new State(new int[]{91,114});
    states[114] = new State(new int[]{68,115});
    states[115] = new State(-46);
    states[116] = new State(new int[]{59,117});
    states[117] = new State(-7);
    states[118] = new State(new int[]{93,25,86,26,94,27,64,132},new int[]{-10,119,-11,135,-12,124});
    states[119] = new State(new int[]{92,120,44,122});
    states[120] = new State(new int[]{68,121});
    states[121] = new State(-11);
    states[122] = new State(new int[]{93,25,86,26,94,27,64,132},new int[]{-11,123,-12,124});
    states[123] = new State(-12);
    states[124] = new State(new int[]{89,125});
    states[125] = new State(new int[]{64,127,65,128,62,129,63,130,66,131},new int[]{-13,126});
    states[126] = new State(-14);
    states[127] = new State(-16);
    states[128] = new State(-17);
    states[129] = new State(-18);
    states[130] = new State(-19);
    states[131] = new State(-20);
    states[132] = new State(new int[]{89,133});
    states[133] = new State(new int[]{64,127,65,128,62,129,63,130,66,131},new int[]{-13,134});
    states[134] = new State(-15);
    states[135] = new State(-13);
    states[136] = new State(new int[]{59,137});
    states[137] = new State(-8);
    states[138] = new State(new int[]{68,139,64,149,93,25,86,26,94,27},new int[]{-15,140,-12,150});
    states[139] = new State(-26);
    states[140] = new State(new int[]{91,141,44,146});
    states[141] = new State(new int[]{68,142});
    states[142] = new State(new int[]{89,143,59,-28});
    states[143] = new State(new int[]{81,144});
    states[144] = new State(new int[]{64,145});
    states[145] = new State(-29);
    states[146] = new State(new int[]{64,147,93,25,86,26,94,27},new int[]{-12,148});
    states[147] = new State(-30);
    states[148] = new State(-31);
    states[149] = new State(-32);
    states[150] = new State(-33);
    states[151] = new State(new int[]{68,152});
    states[152] = new State(-27);
    states[153] = new State(new int[]{59,154});
    states[154] = new State(-9);
    states[155] = new State(new int[]{82,156});
    states[156] = new State(new int[]{91,157});
    states[157] = new State(new int[]{81,158});
    states[158] = new State(new int[]{64,159});
    states[159] = new State(-23);
    states[160] = new State(new int[]{82,161});
    states[161] = new State(-24);
    states[162] = new State(new int[]{82,163});
    states[163] = new State(new int[]{89,164});
    states[164] = new State(new int[]{81,165});
    states[165] = new State(new int[]{64,166});
    states[166] = new State(-25);
    states[167] = new State(-10);
    states[168] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,61});
    rules[2] = new Rule(-1, new int[]{-1,-3});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-4,59});
    rules[5] = new Rule(-3, new int[]{-5,59});
    rules[6] = new Rule(-3, new int[]{-6,59});
    rules[7] = new Rule(-3, new int[]{-7,59});
    rules[8] = new Rule(-3, new int[]{-8,59});
    rules[9] = new Rule(-3, new int[]{-9,59});
    rules[10] = new Rule(-3, new int[]{60});
    rules[11] = new Rule(-7, new int[]{100,-10,92,68});
    rules[12] = new Rule(-10, new int[]{-10,44,-11});
    rules[13] = new Rule(-10, new int[]{-11});
    rules[14] = new Rule(-11, new int[]{-12,89,-13});
    rules[15] = new Rule(-11, new int[]{64,89,-13});
    rules[16] = new Rule(-13, new int[]{64});
    rules[17] = new Rule(-13, new int[]{65});
    rules[18] = new Rule(-13, new int[]{62});
    rules[19] = new Rule(-13, new int[]{63});
    rules[20] = new Rule(-13, new int[]{66});
    rules[21] = new Rule(-14, new int[]{63});
    rules[22] = new Rule(-14, new int[]{62});
    rules[23] = new Rule(-9, new int[]{104,82,91,81,64});
    rules[24] = new Rule(-9, new int[]{105,82});
    rules[25] = new Rule(-9, new int[]{106,82,89,81,64});
    rules[26] = new Rule(-8, new int[]{102,68});
    rules[27] = new Rule(-8, new int[]{103,68});
    rules[28] = new Rule(-8, new int[]{102,-15,91,68});
    rules[29] = new Rule(-8, new int[]{102,-15,91,68,89,81,64});
    rules[30] = new Rule(-15, new int[]{-15,44,64});
    rules[31] = new Rule(-15, new int[]{-15,44,-12});
    rules[32] = new Rule(-15, new int[]{64});
    rules[33] = new Rule(-15, new int[]{-12});
    rules[34] = new Rule(-4, new int[]{99,-16});
    rules[35] = new Rule(-4, new int[]{68,-17,-16});
    rules[36] = new Rule(-16, new int[]{-18});
    rules[37] = new Rule(-16, new int[]{-18,64});
    rules[38] = new Rule(-16, new int[]{-18,84,-19});
    rules[39] = new Rule(-5, new int[]{101,-20});
    rules[40] = new Rule(-5, new int[]{101,83,64});
    rules[41] = new Rule(-5, new int[]{68,69,-20});
    rules[42] = new Rule(-20, new int[]{87,-18,64});
    rules[43] = new Rule(-20, new int[]{87,-18,85,64});
    rules[44] = new Rule(-20, new int[]{87,-18,85,64,77,86,64});
    rules[45] = new Rule(-6, new int[]{88,68,89,68});
    rules[46] = new Rule(-6, new int[]{90,68,91,68});
    rules[47] = new Rule(-19, new int[]{-19,77,-21});
    rules[48] = new Rule(-19, new int[]{-19,78,-21});
    rules[49] = new Rule(-19, new int[]{-21});
    rules[50] = new Rule(-21, new int[]{});
    rules[51] = new Rule(-21, new int[]{-22});
    rules[52] = new Rule(-21, new int[]{-23});
    rules[53] = new Rule(-21, new int[]{-24});
    rules[54] = new Rule(-21, new int[]{-25});
    rules[55] = new Rule(-21, new int[]{-26});
    rules[56] = new Rule(-22, new int[]{-12,-17,64});
    rules[57] = new Rule(-22, new int[]{-12,-17,66});
    rules[58] = new Rule(-22, new int[]{-12,-27,64});
    rules[59] = new Rule(-12, new int[]{93});
    rules[60] = new Rule(-12, new int[]{86});
    rules[61] = new Rule(-12, new int[]{94});
    rules[62] = new Rule(-23, new int[]{96,-17,64});
    rules[63] = new Rule(-23, new int[]{96,-27,64});
    rules[64] = new Rule(-23, new int[]{97,-17,-14});
    rules[65] = new Rule(-23, new int[]{97,-28,-14});
    rules[66] = new Rule(-24, new int[]{95,-17,80});
    rules[67] = new Rule(-24, new int[]{95,-17,64});
    rules[68] = new Rule(-24, new int[]{95,-27,64});
    rules[69] = new Rule(-24, new int[]{95,-17,66});
    rules[70] = new Rule(-24, new int[]{95,70,67});
    rules[71] = new Rule(-24, new int[]{95,69,67});
    rules[72] = new Rule(-24, new int[]{95,-25});
    rules[73] = new Rule(-24, new int[]{95,-22});
    rules[74] = new Rule(-26, new int[]{98,-25});
    rules[75] = new Rule(-26, new int[]{98,-22});
    rules[76] = new Rule(-25, new int[]{64,-17,62});
    rules[77] = new Rule(-25, new int[]{64,-28,62});
    rules[78] = new Rule(-25, new int[]{64,-17,63});
    rules[79] = new Rule(-25, new int[]{64,-28,63});
    rules[80] = new Rule(-25, new int[]{64,-17,64});
    rules[81] = new Rule(-25, new int[]{64,-27,64});
    rules[82] = new Rule(-25, new int[]{64,-17,65});
    rules[83] = new Rule(-25, new int[]{64,-17,66});
    rules[84] = new Rule(-25, new int[]{64,70,67});
    rules[85] = new Rule(-25, new int[]{64,69,67});
    rules[86] = new Rule(-17, new int[]{69});
    rules[87] = new Rule(-17, new int[]{70});
    rules[88] = new Rule(-28, new int[]{71});
    rules[89] = new Rule(-28, new int[]{72});
    rules[90] = new Rule(-28, new int[]{73});
    rules[91] = new Rule(-28, new int[]{74});
    rules[92] = new Rule(-27, new int[]{75});
    rules[93] = new Rule(-27, new int[]{76});
    rules[94] = new Rule(-18, new int[]{79});
    rules[95] = new Rule(-18, new int[]{80});
    rules[96] = new Rule(-18, new int[]{96});
    rules[97] = new Rule(-18, new int[]{98});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 11: // attr_setting -> SET, value_setting_list, FOR, IDENTIFIER
#line 93 "Parser.y"
{EvaluateSetExpression(ValueStack[ValueStack.Depth-1].strVal, ((List<Expression>)(ValueStack[ValueStack.Depth-3].val)));}
        break;
      case 12: // value_setting_list -> value_setting_list, ',', value_setting
#line 97 "Parser.y"
{((List<Expression>)(ValueStack[ValueStack.Depth-3].val)).Add((Expression)(ValueStack[ValueStack.Depth-1].val)); CurrentSemanticValue.val = ValueStack[ValueStack.Depth-3].val;}
        break;
      case 13: // value_setting_list -> value_setting
#line 98 "Parser.y"
{CurrentSemanticValue.val = new List<Expression>(){((Expression)(ValueStack[ValueStack.Depth-1].val))};}
        break;
      case 14: // value_setting -> attribute, TO, value
#line 102 "Parser.y"
{CurrentSemanticValue.val = GenerateSetExpression(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].val);}
        break;
      case 15: // value_setting -> STRING, TO, value
#line 103 "Parser.y"
{CurrentSemanticValue.val = GenerateSetExpression(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].val);}
        break;
      case 16: // value -> STRING
#line 107 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].strVal;}
        break;
      case 17: // value -> BOOLEAN
#line 108 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].boolVal;}
        break;
      case 18: // value -> INTEGER
#line 109 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].intVal;}
        break;
      case 19: // value -> DOUBLE
#line 110 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].doubleVal;}
        break;
      case 20: // value -> NONDEF
#line 111 "Parser.y"
{CurrentSemanticValue.val = null;}
        break;
      case 21: // num_value -> DOUBLE
#line 115 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].doubleVal;}
        break;
      case 22: // num_value -> INTEGER
#line 116 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].intVal;}
        break;
      case 23: // model_actions -> OPEN, MODEL, FROM, FILE, STRING
#line 120 "Parser.y"
{OpenModel(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 24: // model_actions -> CLOSE, MODEL
#line 121 "Parser.y"
{CloseModel();}
        break;
      case 25: // model_actions -> SAVE, MODEL, TO, FILE, STRING
#line 122 "Parser.y"
{SaveModel(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 26: // variables_actions -> DUMP, IDENTIFIER
#line 126 "Parser.y"
{DumpIdentifier(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 27: // variables_actions -> CLEAR, IDENTIFIER
#line 127 "Parser.y"
{ClearIdentifier(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 28: // variables_actions -> DUMP, string_list, FROM, IDENTIFIER
#line 128 "Parser.y"
{DumpAttributes(ValueStack[ValueStack.Depth-1].strVal, ((List<string>)(ValueStack[ValueStack.Depth-3].val)));}
        break;
      case 29: // variables_actions -> DUMP, string_list, FROM, IDENTIFIER, TO, FILE, STRING
#line 129 "Parser.y"
{DumpAttributes(ValueStack[ValueStack.Depth-4].strVal, ((List<string>)(ValueStack[ValueStack.Depth-6].val)), ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 30: // string_list -> string_list, ',', STRING
#line 133 "Parser.y"
{((List<string>)(ValueStack[ValueStack.Depth-3].val)).Add(ValueStack[ValueStack.Depth-1].strVal); CurrentSemanticValue.val = ValueStack[ValueStack.Depth-3].val;}
        break;
      case 31: // string_list -> string_list, ',', attribute
#line 134 "Parser.y"
{((List<string>)(ValueStack[ValueStack.Depth-3].val)).Add(ValueStack[ValueStack.Depth-1].strVal); CurrentSemanticValue.val = ValueStack[ValueStack.Depth-3].val;}
        break;
      case 32: // string_list -> STRING
#line 135 "Parser.y"
{CurrentSemanticValue.val = new List<string>(){ValueStack[ValueStack.Depth-1].strVal};}
        break;
      case 33: // string_list -> attribute
#line 136 "Parser.y"
{CurrentSemanticValue.val = new List<string>(){ValueStack[ValueStack.Depth-1].strVal};}
        break;
      case 34: // selection -> SELECT, selection_statement
#line 140 "Parser.y"
{Variables.Set("$$", ((IEnumerable<IPersistIfcEntity>)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 35: // selection -> IDENTIFIER, op_bool, selection_statement
#line 141 "Parser.y"
{AddOrRemoveFromSelection(ValueStack[ValueStack.Depth-3].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)), ValueStack[ValueStack.Depth-1].val);}
        break;
      case 36: // selection_statement -> object
#line 145 "Parser.y"
{CurrentSemanticValue.val = Select(ValueStack[ValueStack.Depth-1].typeVal);}
        break;
      case 37: // selection_statement -> object, STRING
#line 146 "Parser.y"
{CurrentSemanticValue.val = Select(ValueStack[ValueStack.Depth-2].typeVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 38: // selection_statement -> object, WHERE, conditions
#line 147 "Parser.y"
{CurrentSemanticValue.val = Select(ValueStack[ValueStack.Depth-3].typeVal, ((Expression)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 39: // creation -> CREATE, creation_statement
#line 151 "Parser.y"
{Variables.Set("$$", ((IPersistIfcEntity)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 40: // creation -> CREATE, CLASSIFICATION, STRING
#line 152 "Parser.y"
{CreateClassification(ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 41: // creation -> IDENTIFIER, OP_EQ, creation_statement
#line 153 "Parser.y"
{Variables.Set(ValueStack[ValueStack.Depth-3].strVal, ((IPersistIfcEntity)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 42: // creation_statement -> NEW, object, STRING
#line 157 "Parser.y"
{CurrentSemanticValue.val = CreateObject(ValueStack[ValueStack.Depth-2].typeVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 43: // creation_statement -> NEW, object, WITH_NAME, STRING
#line 158 "Parser.y"
{CurrentSemanticValue.val = CreateObject(ValueStack[ValueStack.Depth-3].typeVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 44: // creation_statement -> NEW, object, WITH_NAME, STRING, OP_AND, DESCRIPTION, 
               //                       STRING
#line 159 "Parser.y"
{CurrentSemanticValue.val = CreateObject(ValueStack[ValueStack.Depth-6].typeVal, ValueStack[ValueStack.Depth-4].strVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 45: // addition -> ADD, IDENTIFIER, TO, IDENTIFIER
#line 163 "Parser.y"
{AddOrRemove(Tokens.ADD, ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 46: // addition -> REMOVE, IDENTIFIER, FROM, IDENTIFIER
#line 164 "Parser.y"
{AddOrRemove(Tokens.REMOVE, ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal);}
        break;
      case 47: // conditions -> conditions, OP_AND, condition
#line 168 "Parser.y"
{CurrentSemanticValue.val = Expression.AndAlso(((Expression)(ValueStack[ValueStack.Depth-3].val)), ((Expression)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 48: // conditions -> conditions, OP_OR, condition
#line 169 "Parser.y"
{CurrentSemanticValue.val = Expression.OrElse(((Expression)(ValueStack[ValueStack.Depth-3].val)), ((Expression)(ValueStack[ValueStack.Depth-1].val)));}
        break;
      case 49: // conditions -> condition
#line 170 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 51: // condition -> attributeCondition
#line 175 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 52: // condition -> materialCondition
#line 176 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 53: // condition -> typeCondition
#line 177 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 54: // condition -> propertyCondition
#line 178 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 55: // condition -> groupCondition
#line 179 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val;}
        break;
      case 56: // attributeCondition -> attribute, op_bool, STRING
#line 183 "Parser.y"
{CurrentSemanticValue.val = GenerateAttributeCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 57: // attributeCondition -> attribute, op_bool, NONDEF
#line 184 "Parser.y"
{CurrentSemanticValue.val = GenerateAttributeCondition(ValueStack[ValueStack.Depth-3].strVal, null, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 58: // attributeCondition -> attribute, op_cont, STRING
#line 185 "Parser.y"
{CurrentSemanticValue.val = GenerateAttributeCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 59: // attribute -> NAME
#line 189 "Parser.y"
{CurrentSemanticValue.strVal = "Name";}
        break;
      case 60: // attribute -> DESCRIPTION
#line 190 "Parser.y"
{CurrentSemanticValue.strVal = "Description";}
        break;
      case 61: // attribute -> PREDEFINED_TYPE
#line 191 "Parser.y"
{CurrentSemanticValue.strVal = "PredefinedType";}
        break;
      case 62: // materialCondition -> MATERIAL, op_bool, STRING
#line 195 "Parser.y"
{CurrentSemanticValue.val = GenerateMaterialCondition(ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 63: // materialCondition -> MATERIAL, op_cont, STRING
#line 196 "Parser.y"
{CurrentSemanticValue.val = GenerateMaterialCondition(ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 64: // materialCondition -> THICKNESS, op_bool, num_value
#line 198 "Parser.y"
{CurrentSemanticValue.val = GenerateThicknessCondition(Convert.ToDouble(ValueStack[ValueStack.Depth-1].val), ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 65: // materialCondition -> THICKNESS, op_num_rel, num_value
#line 199 "Parser.y"
{CurrentSemanticValue.val = GenerateThicknessCondition(Convert.ToDouble(ValueStack[ValueStack.Depth-1].val), ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 66: // typeCondition -> TYPE, op_bool, PRODUCT_TYPE
#line 203 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectTypeCondition(ValueStack[ValueStack.Depth-1].typeVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 67: // typeCondition -> TYPE, op_bool, STRING
#line 204 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectNameCondition(ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 68: // typeCondition -> TYPE, op_cont, STRING
#line 205 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectNameCondition(ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 69: // typeCondition -> TYPE, op_bool, NONDEF
#line 206 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectTypeCondition(null, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 70: // typeCondition -> TYPE, OP_NEQ, DEFINED
#line 207 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectTypeCondition(null, Tokens.OP_EQ);}
        break;
      case 71: // typeCondition -> TYPE, OP_EQ, DEFINED
#line 208 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeObjectTypeCondition(null, Tokens.OP_NEQ);}
        break;
      case 72: // typeCondition -> TYPE, propertyCondition
#line 209 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeCondition((Expression)(ValueStack[ValueStack.Depth-1].val));}
        break;
      case 73: // typeCondition -> TYPE, attributeCondition
#line 210 "Parser.y"
{CurrentSemanticValue.val = GenerateTypeCondition((Expression)(ValueStack[ValueStack.Depth-1].val));}
        break;
      case 74: // groupCondition -> GROUP, propertyCondition
#line 214 "Parser.y"
{CurrentSemanticValue.val = GenerateGroupCondition((Expression)(ValueStack[ValueStack.Depth-1].val));}
        break;
      case 75: // groupCondition -> GROUP, attributeCondition
#line 215 "Parser.y"
{CurrentSemanticValue.val = GenerateGroupCondition((Expression)(ValueStack[ValueStack.Depth-1].val));}
        break;
      case 76: // propertyCondition -> STRING, op_bool, INTEGER
#line 219 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].intVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 77: // propertyCondition -> STRING, op_num_rel, INTEGER
#line 220 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].intVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 78: // propertyCondition -> STRING, op_bool, DOUBLE
#line 222 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].doubleVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 79: // propertyCondition -> STRING, op_num_rel, DOUBLE
#line 223 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].doubleVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 80: // propertyCondition -> STRING, op_bool, STRING
#line 225 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 81: // propertyCondition -> STRING, op_cont, STRING
#line 226 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 82: // propertyCondition -> STRING, op_bool, BOOLEAN
#line 228 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].boolVal, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 83: // propertyCondition -> STRING, op_bool, NONDEF
#line 229 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, null, ((Tokens)(ValueStack[ValueStack.Depth-2].val)));}
        break;
      case 84: // propertyCondition -> STRING, OP_NEQ, DEFINED
#line 230 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, null, Tokens.OP_EQ);}
        break;
      case 85: // propertyCondition -> STRING, OP_EQ, DEFINED
#line 231 "Parser.y"
{CurrentSemanticValue.val = GeneratePropertyCondition(ValueStack[ValueStack.Depth-3].strVal, null, Tokens.OP_NEQ);}
        break;
      case 86: // op_bool -> OP_EQ
#line 235 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_EQ;}
        break;
      case 87: // op_bool -> OP_NEQ
#line 236 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_NEQ;}
        break;
      case 88: // op_num_rel -> OP_GT
#line 240 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_GT;}
        break;
      case 89: // op_num_rel -> OP_LT
#line 241 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_LT;}
        break;
      case 90: // op_num_rel -> OP_GTE
#line 242 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_GTE;}
        break;
      case 91: // op_num_rel -> OP_LTQ
#line 243 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_LTQ;}
        break;
      case 92: // op_cont -> OP_CONTAINS
#line 247 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_CONTAINS;}
        break;
      case 93: // op_cont -> OP_NOT_CONTAINS
#line 248 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_NOT_CONTAINS;}
        break;
      case 94: // object -> PRODUCT
#line 252 "Parser.y"
{CurrentSemanticValue.typeVal = ValueStack[ValueStack.Depth-1].typeVal;}
        break;
      case 95: // object -> PRODUCT_TYPE
#line 253 "Parser.y"
{CurrentSemanticValue.typeVal = ValueStack[ValueStack.Depth-1].typeVal;}
        break;
      case 96: // object -> MATERIAL
#line 254 "Parser.y"
{CurrentSemanticValue.typeVal = ValueStack[ValueStack.Depth-1].typeVal;}
        break;
      case 97: // object -> GROUP
#line 255 "Parser.y"
{CurrentSemanticValue.typeVal = ValueStack[ValueStack.Depth-1].typeVal;}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
