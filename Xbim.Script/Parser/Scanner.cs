//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  1.2.0
//  Machine:  CENTAURUS
//  DateTime: 10.10.2013 20:29:19
//  UserName: Martin
//  GPLEX input file <Scanner.lex - 10.10.2013 17:21:06>
//  GPLEX frame file <embedded resource>
//
//  Option settings: verbose, parser, minimize
//  Option settings: compressNext, noPersistBuffer, embedbuffers
//

//
// Experimental embedded frame
// Version 1.1.4 of 10-May-2010
//
//
#define BACKUP
#define BYTEMODE

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.Xbim.Gppg;

namespace Xbim.Script
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     internal sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 309;
        const int initial = 310;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {310, 0};

    static Table[] NxS = new Table[498] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string ""
      new Table(0, 1, -1, new short[] {1}),
/* NxS[   2] */ new Table(0, 0, -1, null), // Shortest string "\t"
/* NxS[   3] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[   4] */ new Table(0, 0, -1, null), // Shortest string "\r"
/* NxS[   5] */ new Table(0, 0, -1, null), // Shortest string "\x20"
/* NxS[   6] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[   7] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[   8] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[   9] */ // Shortest string "."
      new Table(46, 71, -1, new short[] {495, -1, 301, 301, 301, 301, 
          301, 301, 301, 301, 301, 301, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 496, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          496, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 496, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          496}),
/* NxS[  10] */ // Shortest string "0"
      new Table(46, 12, -1, new short[] {301, -1, 302, 302, 302, 302, 
          302, 302, 302, 302, 302, 302}),
/* NxS[  11] */ new Table(0, 0, -1, null), // Shortest string ":"
/* NxS[  12] */ new Table(0, 0, -1, null), // Shortest string ";"
/* NxS[  13] */ // Shortest string "<"
      new Table(61, 1, -1, new short[] {188}),
/* NxS[  14] */ new Table(0, 0, -1, null), // Shortest string "="
/* NxS[  15] */ // Shortest string ">"
      new Table(61, 1, -1, new short[] {190}),
/* NxS[  16] */ // Shortest string "A"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 297, 17, 17, 17, 17, 17, 17, 17, 17, 17, 298, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 297, 17, 17, 17, 17, 17, 17, 17, 17, 17, 298, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  17] */ // Shortest string "B"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  18] */ // Shortest string "C"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 253, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 254, 17, 17, 255, 17, 17, 256, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 253, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 254, 17, 17, 255, 17, 17, 256, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  19] */ // Shortest string "D"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 228, 17, 17, 17, 17, 17, 17, 17, 17, 17, 229, 17, 17, 17, 
          17, 17, 230, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 228, 17, 17, 17, 17, 17, 17, 17, 17, 17, 229, 17, 17, 17, 
          17, 17, 230, 17, 17, 17, 17, 17}),
/* NxS[  20] */ // Shortest string "E"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 218, 17, 
          17, 17, 17, 17, 17, 219, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 218, 17, 
          17, 17, 17, 17, 17, 219, 17, 17}),
/* NxS[  21] */ // Shortest string "F"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 208, 17, 
          17, 17, 17, 17, 17, 17, 209, 17, 17, 17, 17, 17, 210, 17, 17, 211, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 208, 17, 
          17, 17, 17, 17, 17, 17, 209, 17, 17, 17, 17, 17, 210, 17, 17, 211, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  22] */ // Shortest string "G"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 204, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 204, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  23] */ // Shortest string "I"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 176, 17, 17, 17, 17, 
          177, 178, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 176, 17, 17, 17, 17, 
          177, 178, 17, 17, 17, 17, 17, 17}),
/* NxS[  24] */ // Shortest string "L"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 167, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 167, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  25] */ // Shortest string "M"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 156, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 157, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 156, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 157, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  26] */ // Shortest string "N"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 149, 17, 
          17, 17, 150, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 151, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 149, 17, 
          17, 17, 150, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 151, 17, 17, 17, 17, 17}),
/* NxS[  27] */ // Shortest string "O"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 138, 17, 139, 
          17, 17, 17, 140, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 138, 17, 139, 
          17, 17, 17, 140, 17, 17, 17, 17}),
/* NxS[  28] */ // Shortest string "P"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 112, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 112, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  29] */ // Shortest string "R"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 101, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 101, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  30] */ // Shortest string "S"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 84, 17, 
          17, 17, 85, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 86, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 84, 17, 
          17, 17, 85, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 86, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  31] */ // Shortest string "T"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 64, 17, 17, 17, 17, 17, 17, 65, 17, 17, 66, 
          17, 17, 17, 17, 17, 17, 67, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 64, 17, 17, 17, 17, 17, 17, 65, 17, 17, 66, 
          17, 17, 17, 17, 17, 17, 67, 17}),
/* NxS[  32] */ // Shortest string "U"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 52, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 52, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  33] */ // Shortest string "V"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 45, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 45, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  34] */ // Shortest string "W"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 37, 38, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 37, 38, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  35] */ new Table(0, 0, -1, null), // Shortest string "~"
/* NxS[  36] */ new Table(0, 0, -1, null), // Shortest string "||"
/* NxS[  37] */ // Shortest string "WH"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 42, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 42, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  38] */ // Shortest string "WI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 39, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 39, 17, 17, 17, 17, 17, 17}),
/* NxS[  39] */ // Shortest string "WIT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 40, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 40, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  40] */ // Shortest string "WITH"
      new Table(32, 91, -1, new short[] {319, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17}),
/* NxS[  41] */ new Table(0, 0, -1, null), // Shortest string "WITH\x20NAME"
/* NxS[  42] */ // Shortest string "WHE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 43, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 43, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  43] */ // Shortest string "WHER"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 44, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 44, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  44] */ // Shortest string "WHERE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  45] */ // Shortest string "VA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 46, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 46, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  46] */ // Shortest string "VAL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 47, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 47, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  47] */ // Shortest string "VALI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 48, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 48, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  48] */ // Shortest string "VALID"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 49, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 49, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  49] */ // Shortest string "VALIDA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 50, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 50, 17, 17, 17, 17, 17, 17}),
/* NxS[  50] */ // Shortest string "VALIDAT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 51, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 51, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  51] */ // Shortest string "VALIDATE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  52] */ // Shortest string "UN"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 53, 17, 17, 17, 17, 17, 17, 54, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 53, 17, 17, 17, 17, 17, 17, 54, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  53] */ // Shortest string "UND"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 59, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 59, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  54] */ // Shortest string "UNK"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 55, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 55, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  55] */ // Shortest string "UNKN"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 56, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 56, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  56] */ // Shortest string "UNKNO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 57, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 57, 17, 17, 17}),
/* NxS[  57] */ // Shortest string "UNKNOW"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 58, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 58, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  58] */ // Shortest string "NULL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  59] */ // Shortest string "UNDE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 60, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 60, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  60] */ // Shortest string "UNDEF"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 61, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 61, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  61] */ // Shortest string "UNDEFI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 62, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 62, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  62] */ // Shortest string "UNDEFIN"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 63, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 63, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  63] */ // Shortest string "UNDEFINE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 58, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 58, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  64] */ // Shortest string "TH"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 77, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 77, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  65] */ // Shortest string "TO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 72, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 72, 17, 17, 17, 17, 17}),
/* NxS[  66] */ // Shortest string "TR"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 70, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 70, 17, 17, 17, 17, 17}),
/* NxS[  67] */ // Shortest string "TY"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 68, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 68, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  68] */ // Shortest string "TYP"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 69, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 69, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  69] */ // Shortest string "TYPE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  70] */ // Shortest string "TRU"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 71, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 71, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  71] */ // Shortest string "TRUE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  72] */ // Shortest string "TOU"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          73, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          73, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  73] */ // Shortest string "TOUC"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 74, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 74, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  74] */ // Shortest string "TOUCH"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 75, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 75, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  75] */ // Shortest string "TOUCHE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          76, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          76, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  76] */ // Shortest string "TOUCHES"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  77] */ // Shortest string "THI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          78, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          78, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  78] */ // Shortest string "THIC"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 79, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 79, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  79] */ // Shortest string "THICK"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 80, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 80, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  80] */ // Shortest string "THICKN"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 81, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 81, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  81] */ // Shortest string "THICKNE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          82, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          82, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  82] */ // Shortest string "THICKNES"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          83, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          83, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  83] */ // Shortest string "THICKNESS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  84] */ // Shortest string "SA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 99, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 99, 17, 17, 17, 17}),
/* NxS[  85] */ // Shortest string "SE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 94, 17, 17, 17, 17, 17, 17, 
          17, 95, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 94, 17, 17, 17, 17, 17, 17, 
          17, 95, 17, 17, 17, 17, 17, 17}),
/* NxS[  86] */ // Shortest string "SP"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 87, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 87, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  87] */ // Shortest string "SPA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 88, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 88, 17, 17, 17, 17, 17, 17}),
/* NxS[  88] */ // Shortest string "SPAT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 89, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 89, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  89] */ // Shortest string "SPATI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 90, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 90, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  90] */ // Shortest string "SPATIA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 91, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 91, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  91] */ // Shortest string "SPATIAL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 92, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 92, 17}),
/* NxS[  92] */ // Shortest string "SPATIALY"
      new Table(32, 91, -1, new short[] {323, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17}),
/* NxS[  93] */ new Table(0, 0, -1, null), // Shortest string "SPATIALY\x20EQUALS"
/* NxS[  94] */ // Shortest string "SEL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 96, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 96, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  95] */ // Shortest string "SET"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  96] */ // Shortest string "SELE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          97, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          97, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  97] */ // Shortest string "SELEC"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 98, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 98, 17, 17, 17, 17, 17, 17}),
/* NxS[  98] */ // Shortest string "SELECT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[  99] */ // Shortest string "SAV"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 100, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 100, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 100] */ // Shortest string "SAVE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 101] */ // Shortest string "RE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 102, 103, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 102, 103, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 102] */ // Shortest string "REL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 107, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 107, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 103] */ // Shortest string "REM"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 104, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 104, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 104] */ // Shortest string "REMO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 105, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 105, 17, 17, 17, 17}),
/* NxS[ 105] */ // Shortest string "REMOV"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 106, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 106, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 106] */ // Shortest string "REMOVE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 107] */ // Shortest string "RELA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 108, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 108, 17, 17, 17, 17, 17, 17}),
/* NxS[ 108] */ // Shortest string "RELAT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 109, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 109, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 109] */ // Shortest string "RELATE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          110, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          110, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 110] */ // Shortest string "RELATES"
      new Table(32, 91, -1, new short[] {329, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17}),
/* NxS[ 111] */ new Table(0, 0, -1, null), // Shortest string "RELATES\x20TO"
/* NxS[ 112] */ // Shortest string "PR"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 113, 17, 17, 17, 17, 17, 17, 17, 17, 17, 114, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 113, 17, 17, 17, 17, 17, 17, 17, 17, 17, 114, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 113] */ // Shortest string "PRE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 125, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 125, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 114] */ // Shortest string "PRO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 115, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 115, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 115] */ // Shortest string "PROP"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 116, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 116, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 116] */ // Shortest string "PROPE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 117, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 117, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 117] */ // Shortest string "PROPER"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 118, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 118, 17, 17, 17, 17, 17, 17}),
/* NxS[ 118] */ // Shortest string "PROPERT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 119, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 119, 17}),
/* NxS[ 119] */ // Shortest string "PROPERTY"
      new Table(32, 91, -1, new short[] {331, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 121, 17, 17, 
          17, 17, 17, 17, 17, -1, -1, -1, -1, 120, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 121, 17, 17, 
          17, 17, 17, 17, 17}),
/* NxS[ 120] */ // Shortest string "PROPERTY_"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          121, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          121, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 121] */ // Shortest string "PROPERTYS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 122, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 122, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 122] */ // Shortest string "PROPERTYSE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 123, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 123, 17, 17, 17, 17, 17, 17}),
/* NxS[ 123] */ // Shortest string "PROPERTYSET"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 124] */ new Table(0, 0, -1, null), // Shortest string "PROPERTY\x20SET"
/* NxS[ 125] */ // Shortest string "PRED"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 126, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 126, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 126] */ // Shortest string "PREDE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 127, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 127, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 127] */ // Shortest string "PREDEF"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 128, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 128, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 128] */ // Shortest string "PREDEFI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 129, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 129, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 129] */ // Shortest string "PREDEFIN"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 130, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 130, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 130] */ // Shortest string "PREDEFINE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 131, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 131, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 131] */ // Shortest string "PREDEFINED"
      new Table(32, 91, -1, new short[] {334, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 133, 17, 
          17, 17, 17, 17, 17, -1, -1, -1, -1, 132, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 133, 17, 
          17, 17, 17, 17, 17}),
/* NxS[ 132] */ // Shortest string "PREDEFINED_"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 133, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 133, 17, 17, 17, 17, 17, 17}),
/* NxS[ 133] */ // Shortest string "PREDEFINEDT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 134, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 134, 17}),
/* NxS[ 134] */ // Shortest string "PREDEFINEDTY"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 135, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 135, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 135] */ // Shortest string "PREDEFINEDTYP"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 136, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 136, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 136] */ // Shortest string "PREDEFINEDTYPE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 137] */ new Table(0, 0, -1, null), // Shortest string "PREDEFINED\x20TYPE"
/* NxS[ 138] */ // Shortest string "OP"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 147, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 147, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 139] */ // Shortest string "OR"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 140] */ // Shortest string "OV"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 141, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 141, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 141] */ // Shortest string "OVE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 142, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 142, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 142] */ // Shortest string "OVER"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 143, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 143, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 143] */ // Shortest string "OVERL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 144, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 144, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 144] */ // Shortest string "OVERLA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 145, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 145, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 145] */ // Shortest string "OVERLAP"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          146, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          146, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 146] */ // Shortest string "OVERLAPS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 147] */ // Shortest string "OPE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 148, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 148, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 148] */ // Shortest string "OPEN"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 149] */ // Shortest string "NA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 154, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 154, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 150] */ // Shortest string "NE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 153, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 153, 17, 17, 17}),
/* NxS[ 151] */ // Shortest string "NU"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 152, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 152, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 152] */ // Shortest string "NUL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 58, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 58, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 153] */ // Shortest string "NEW"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 154] */ // Shortest string "NAM"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 155, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 155, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 155] */ // Shortest string "NAME"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 156] */ // Shortest string "MA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 161, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 161, 17, 17, 17, 17, 17, 17}),
/* NxS[ 157] */ // Shortest string "MO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 158, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 158, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 158] */ // Shortest string "MOD"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 159, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 159, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 159] */ // Shortest string "MODE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 160, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 160, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 160] */ // Shortest string "MODEL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 161] */ // Shortest string "MAT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 162, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 162, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 162] */ // Shortest string "MATE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 163, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 163, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 163] */ // Shortest string "MATER"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 164, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 164, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 164] */ // Shortest string "MATERI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 165, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 165, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 165] */ // Shortest string "MATERIA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 166, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 166, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 166] */ // Shortest string "MATERIAL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 167] */ // Shortest string "LA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 168, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 168, 17}),
/* NxS[ 168] */ // Shortest string "LAY"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 169, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 169, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 169] */ // Shortest string "LAYE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 170, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 170, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 170] */ // Shortest string "LAYER"
      new Table(32, 91, -1, new short[] {338, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 172, 17, 17, 
          17, 17, 17, 17, 17, -1, -1, -1, -1, 171, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 172, 17, 17, 
          17, 17, 17, 17, 17}),
/* NxS[ 171] */ // Shortest string "LAYER_"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          172, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          172, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 172] */ // Shortest string "LAYERS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 173, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 173, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 173] */ // Shortest string "LAYERSE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 174, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 174, 17, 17, 17, 17, 17, 17}),
/* NxS[ 174] */ // Shortest string "LAYERSET"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 175] */ new Table(0, 0, -1, null), // Shortest string "LAYER\x20SET"
/* NxS[ 176] */ // Shortest string "IN"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 195, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 195, 17, 17, 17, 17, 17, 17}),
/* NxS[ 177] */ // Shortest string "IS"
      new Table(32, 91, -1, new short[] {341, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 179, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 179, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17}),
/* NxS[ 178] */ // Shortest string "IT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 179] */ // Shortest string "ISN"
      new Table(39, 84, -1, new short[] {342, -1, -1, -1, -1, -1, 
          17, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 
          -1, -1, 17, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 180] */ new Table(0, 0, -1, null), // Shortest string "!~"
/* NxS[ 181] */ new Table(0, 0, -1, null), // Shortest string "IS\x20WITHIN"
/* NxS[ 182] */ new Table(0, 0, -1, null), // Shortest string "IS\x20WEST\x20FROM"
/* NxS[ 183] */ new Table(0, 0, -1, null), // Shortest string "IS\x20SOUTH\x20FROM"
/* NxS[ 184] */ // Shortest string "IS\x20NOT"
      new Table(32, 1, -1, new short[] {378}),
/* NxS[ 185] */ new Table(0, 0, -1, null), // Shortest string "!="
/* NxS[ 186] */ new Table(0, 0, -1, null), // Shortest string "IS\x20NORTH\x20FROM"
/* NxS[ 187] */ // Shortest string "IS\x20LESS\x20THAN"
      new Table(32, 1, -1, new short[] {401}),
/* NxS[ 188] */ new Table(0, 0, -1, null), // Shortest string "<="
/* NxS[ 189] */ // Shortest string "IS\x20GREATER\x20THAN"
      new Table(32, 1, -1, new short[] {422}),
/* NxS[ 190] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[ 191] */ new Table(0, 0, -1, null), // Shortest string "IS\x20EAST\x20FROM"
/* NxS[ 192] */ new Table(0, 0, -1, null), // Shortest string "IS\x20DISJOINT\x20FROM"
/* NxS[ 193] */ new Table(0, 0, -1, null), // Shortest string "IS\x20BELOW\x20FROM"
/* NxS[ 194] */ new Table(0, 0, -1, null), // Shortest string "IS\x20ABOVE\x20FROM"
/* NxS[ 195] */ // Shortest string "INT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 196, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 196, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 196] */ // Shortest string "INTE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 197, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 197, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 197] */ // Shortest string "INTER"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          198, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          198, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 198] */ // Shortest string "INTERS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 199, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 199, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 199] */ // Shortest string "INTERSE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          200, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          200, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 200] */ // Shortest string "INTERSEC"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 201, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 201, 17, 17, 17, 17, 17, 17}),
/* NxS[ 201] */ // Shortest string "INTERSECT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          202, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          202, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 202] */ // Shortest string "INTERSECTS"
      new Table(32, 91, -1, new short[] {473, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17}),
/* NxS[ 203] */ new Table(0, 0, -1, null), // Shortest string "INTERSECTS\x20WITH"
/* NxS[ 204] */ // Shortest string "GR"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 205, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 205, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 205] */ // Shortest string "GRO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 206, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 206, 17, 17, 17, 17, 17}),
/* NxS[ 206] */ // Shortest string "GROU"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 207, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 207, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 207] */ // Shortest string "GROUP"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 208] */ // Shortest string "FA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 217, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 217, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 209] */ // Shortest string "FI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 215, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 215, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 210] */ // Shortest string "FO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 214, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 214, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 211] */ // Shortest string "FR"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 212, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 212, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 212] */ // Shortest string "FRO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 213, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 213, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 213] */ // Shortest string "FROM"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 214] */ // Shortest string "FOR"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 215] */ // Shortest string "FIL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 216, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 216, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 216] */ // Shortest string "FILE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 217] */ // Shortest string "FAL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          70, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          70, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 218] */ // Shortest string "EQ"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 224, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 224, 17, 17, 17, 17, 17}),
/* NxS[ 219] */ // Shortest string "EX"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 220, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 220, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 220] */ // Shortest string "EXP"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 221, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 221, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 221] */ // Shortest string "EXPO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 222, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 222, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 222] */ // Shortest string "EXPOR"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 223, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 223, 17, 17, 17, 17, 17, 17}),
/* NxS[ 223] */ // Shortest string "DUMP"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 224] */ // Shortest string "EQU"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 225, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 225, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 225] */ // Shortest string "EQUA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 226, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 226, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 226] */ // Shortest string "EQUAL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          227, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          227, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 227] */ // Shortest string "EQUALS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 228] */ // Shortest string "DE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 235, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          236, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 235, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          236, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 229] */ // Shortest string "DO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 232, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 232, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 230] */ // Shortest string "DU"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 231, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 231, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 231] */ // Shortest string "DUM"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 223, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 223, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 232] */ // Shortest string "DOE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          233, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          233, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 233] */ // Shortest string "DOES"
      new Table(32, 91, -1, new short[] {477, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 234, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 234, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17}),
/* NxS[ 234] */ // Shortest string "DOESN"
      new Table(39, 84, -1, new short[] {478, -1, -1, -1, -1, -1, 
          17, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, 
          -1, -1, -1, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 
          -1, -1, 17, -1, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 235] */ // Shortest string "DEF"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 249, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 249, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 236] */ // Shortest string "DES"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          237, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          237, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 237] */ // Shortest string "DESC"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 238, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 238, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 238] */ // Shortest string "DESCR"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 239, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 239, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 239] */ // Shortest string "DESCRI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 240, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 241, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 240, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 241, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 240] */ // Shortest string "DESCRIB"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 246, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 246, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 241] */ // Shortest string "DESCRIP"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 242, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 242, 17, 17, 17, 17, 17, 17}),
/* NxS[ 242] */ // Shortest string "DESCRIPT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 243, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 243, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 243] */ // Shortest string "DESCRIPTI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 244, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 244, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 244] */ // Shortest string "DESCRIPTIO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 245, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 245, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 245] */ // Shortest string "DESCRIPTION"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 246] */ // Shortest string "DESCRIBE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 247, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 247, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 247] */ // Shortest string "DESCRIBED"
      new Table(32, 91, -1, new short[] {492, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17}),
/* NxS[ 248] */ new Table(0, 0, -1, null), // Shortest string "DESCRIBED\x20AS"
/* NxS[ 249] */ // Shortest string "DEFI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 250, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 250, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 250] */ // Shortest string "DEFIN"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 251, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 251, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 251] */ // Shortest string "DEFINE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 252, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 252, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 252] */ // Shortest string "DEFINED"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 253] */ // Shortest string "CA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 293, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 293, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 254] */ // Shortest string "CL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 275, 17, 
          17, 17, 276, 17, 17, 17, 17, 17, 17, 17, 17, 17, 277, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 275, 17, 
          17, 17, 276, 17, 17, 17, 17, 17, 17, 17, 17, 17, 277, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 255] */ // Shortest string "CO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 266, 17, 17, 17, 17, 
          17, 17, 267, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 266, 17, 17, 17, 17, 
          17, 17, 267, 17, 17, 17, 17, 17}),
/* NxS[ 256] */ // Shortest string "CR"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 257, 17, 17, 17, 17, 17, 17, 17, 17, 17, 258, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 257, 17, 17, 17, 17, 17, 17, 17, 17, 17, 258, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 257] */ // Shortest string "CRE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 263, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 263, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 258] */ // Shortest string "CRO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          259, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          259, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 259] */ // Shortest string "CROS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          260, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          260, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 260] */ // Shortest string "CROSS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 261, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 261, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 261] */ // Shortest string "CROSSE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          262, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          262, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 262] */ // Shortest string "CROSSES"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 263] */ // Shortest string "CREA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 264, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 264, 17, 17, 17, 17, 17, 17}),
/* NxS[ 264] */ // Shortest string "CREAT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 265, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 265, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 265] */ // Shortest string "CREATE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 266] */ // Shortest string "CON"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 270, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 270, 17, 17, 17, 17, 17, 17}),
/* NxS[ 267] */ // Shortest string "COU"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 268, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 268, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 268] */ // Shortest string "COUN"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 269, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 269, 17, 17, 17, 17, 17, 17}),
/* NxS[ 269] */ // Shortest string "COUNT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 270] */ // Shortest string "CONT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 271, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 271, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 271] */ // Shortest string "CONTA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 272, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 272, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 272] */ // Shortest string "CONTAI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 273, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 273, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 273] */ // Shortest string "CONTAIN"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          274, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          274, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 274] */ // Shortest string "CONTAINS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 275] */ // Shortest string "CLA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          282, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          282, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 276] */ // Shortest string "CLE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 280, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 280, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 277] */ // Shortest string "CLO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          278, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          278, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 278] */ // Shortest string "CLOS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 279, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 279, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 279] */ // Shortest string "CLOSE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 280] */ // Shortest string "CLEA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 281, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 281, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 281] */ // Shortest string "CLEAR"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 282] */ // Shortest string "CLAS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          283, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          283, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 283] */ // Shortest string "CLASS"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 284, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 284, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 284] */ // Shortest string "CLASSI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 285, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 285, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 285] */ // Shortest string "CLASSIF"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 286, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 286, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 286] */ // Shortest string "CLASSIFI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          287, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          287, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 287] */ // Shortest string "CLASSIFIC"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 288, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 288, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 288] */ // Shortest string "CLASSIFICA"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 289, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 289, 17, 17, 17, 17, 17, 17}),
/* NxS[ 289] */ // Shortest string "CLASSIFICAT"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 290, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 290, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 290] */ // Shortest string "CLASSIFICATI"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 291, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 291, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 291] */ // Shortest string "CLASSIFICATIO"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 292, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 292, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 292] */ // Shortest string "CLASSIFICATION"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 293] */ // Shortest string "CAL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 294, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 294, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 294] */ // Shortest string "CALL"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 295, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 295, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 295] */ // Shortest string "CALLE"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 296, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 296, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 296] */ // Shortest string "CALLED"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 297] */ // Shortest string "AD"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 300, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 300, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 298] */ // Shortest string "AN"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 299, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 299, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 299] */ // Shortest string "AND"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 300] */ // Shortest string "ADD"
      new Table(45, 78, -1, new short[] {17, -1, -1, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, -1, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 
          17, 17, 17, 17, 17, 17, 17, 17}),
/* NxS[ 301] */ // Shortest string "+."
      new Table(46, 56, -1, new short[] {495, -1, 301, 301, 301, 301, 
          301, 301, 301, 301, 301, 301, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 494, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 494}),
/* NxS[ 302] */ // Shortest string "+0"
      new Table(46, 56, -1, new short[] {301, -1, 302, 302, 302, 302, 
          302, 302, 302, 302, 302, 302, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 494, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 494}),
/* NxS[ 303] */ // Shortest string "+.E+"
      new Table(48, 10, -1, new short[] {303, 303, 303, 303, 303, 303, 
          303, 303, 303, 303}),
/* NxS[ 304] */ // Shortest string "//"
      new Table(10, 4, 304, new short[] {-1, 304, 304, -1}),
/* NxS[ 305] */ new Table(0, 0, -1, null), // Shortest string ".F."
/* NxS[ 306] */ // Shortest string "''"
      new Table(39, 1, -1, new short[] {315}),
/* NxS[ 307] */ new Table(0, 0, -1, null), // Shortest string "&&"
/* NxS[ 308] */ // Shortest string "$$"
      new Table(48, 75, -1, new short[] {308, 308, 308, 308, 308, 308, 
          308, 308, 308, 308, -1, -1, -1, -1, -1, -1, -1, 308, 308, 308, 308, 308, 
          308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 
          308, 308, 308, 308, 308, -1, -1, -1, -1, 308, -1, 308, 308, 308, 308, 308, 
          308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 
          308, 308, 308, 308, 308}),
/* NxS[ 309] */ // Shortest string "\"\""
      new Table(1, 128, 312, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 309, 312, 312, 312, 312, 
          497, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, -1, -1}),
/* NxS[ 310] */ // Shortest string ""
      new Table(0, 127, -1, new short[] {1, -1, -1, -1, -1, -1, 
          -1, -1, -1, 2, 3, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 311, 312, -1, 313, -1, 
          314, 315, 6, 7, -1, 316, 8, 316, 9, 317, 10, 10, 10, 10, 10, 10, 
          10, 10, 10, 10, 11, 12, 13, 14, 15, -1, -1, 16, 17, 18, 19, 20, 
          21, 22, 17, 23, 17, 17, 24, 25, 26, 27, 28, 17, 29, 30, 31, 32, 
          33, 34, 17, 17, 17, -1, -1, -1, -1, -1, -1, 16, 17, 18, 19, 20, 
          21, 22, 17, 23, 17, 17, 24, 25, 26, 27, 28, 17, 29, 30, 31, 32, 
          33, 34, 17, 17, 17, -1, 318, -1, 35}),
/* NxS[ 311] */ // Shortest string "!"
      new Table(61, 66, -1, new short[] {185, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 180}),
/* NxS[ 312] */ // Shortest string "\""
      new Table(1, 128, 312, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 309, 312, 312, 312, 312, 
          497, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 312, 
          312, 312, 312, 312, 312, 312, 312, 312, -1, -1}),
/* NxS[ 313] */ // Shortest string "$"
      new Table(36, 87, -1, new short[] {308, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 308, 308, 308, 308, 308, 308, 308, 308, 308, 
          308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 
          308, -1, -1, -1, -1, -1, -1, 308, 308, 308, 308, 308, 308, 308, 308, 308, 
          308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 
          308}),
/* NxS[ 314] */ // Shortest string "&"
      new Table(38, 1, -1, new short[] {307}),
/* NxS[ 315] */ // Shortest string "'"
      new Table(1, 128, 315, new short[] {-1, -1, -1, -1, -1, -1, 
          -1, -1, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 
          315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 
          306, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 
          315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 
          315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 
          315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 
          315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 
          315, 315, 315, 315, 315, 315, 315, 315, -1, -1}),
/* NxS[ 316] */ // Shortest string "+"
      new Table(46, 12, -1, new short[] {301, -1, 302, 302, 302, 302, 
          302, 302, 302, 302, 302, 302}),
/* NxS[ 317] */ // Shortest string "/"
      new Table(47, 1, -1, new short[] {304}),
/* NxS[ 318] */ // Shortest string "|"
      new Table(124, 1, -1, new short[] {36}),
/* NxS[ 319] */ // Shortest string "WITH\x20"
      new Table(78, 33, -1, new short[] {320, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 320}),
/* NxS[ 320] */ // Shortest string "WITH\x20N"
      new Table(65, 33, -1, new short[] {321, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 321}),
/* NxS[ 321] */ // Shortest string "WITH\x20NA"
      new Table(77, 33, -1, new short[] {322, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 322}),
/* NxS[ 322] */ // Shortest string "WITH\x20NAM"
      new Table(69, 33, -1, new short[] {41, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41}),
/* NxS[ 323] */ // Shortest string "SPATIALY\x20"
      new Table(69, 33, -1, new short[] {324, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 324}),
/* NxS[ 324] */ // Shortest string "SPATIALY\x20E"
      new Table(81, 33, -1, new short[] {325, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 325}),
/* NxS[ 325] */ // Shortest string "SPATIALY\x20EQ"
      new Table(85, 33, -1, new short[] {326, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 326}),
/* NxS[ 326] */ // Shortest string "SPATIALY\x20EQU"
      new Table(65, 33, -1, new short[] {327, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 327}),
/* NxS[ 327] */ // Shortest string "SPATIALY\x20EQUA"
      new Table(76, 33, -1, new short[] {328, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 328}),
/* NxS[ 328] */ // Shortest string "SPATIALY\x20EQUAL"
      new Table(83, 33, -1, new short[] {93, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93}),
/* NxS[ 329] */ // Shortest string "RELATES\x20"
      new Table(84, 33, -1, new short[] {330, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 330}),
/* NxS[ 330] */ // Shortest string "RELATES\x20T"
      new Table(79, 33, -1, new short[] {111, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111}),
/* NxS[ 331] */ // Shortest string "PROPERTY\x20"
      new Table(83, 33, -1, new short[] {332, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 332}),
/* NxS[ 332] */ // Shortest string "PROPERTY\x20S"
      new Table(69, 33, -1, new short[] {333, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 333}),
/* NxS[ 333] */ // Shortest string "PROPERTY\x20SE"
      new Table(84, 33, -1, new short[] {124, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124}),
/* NxS[ 334] */ // Shortest string "PREDEFINED\x20"
      new Table(84, 33, -1, new short[] {335, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 335}),
/* NxS[ 335] */ // Shortest string "PREDEFINED\x20T"
      new Table(89, 33, -1, new short[] {336, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336}),
/* NxS[ 336] */ // Shortest string "PREDEFINED\x20TY"
      new Table(80, 33, -1, new short[] {337, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 337}),
/* NxS[ 337] */ // Shortest string "PREDEFINED\x20TYP"
      new Table(69, 33, -1, new short[] {137, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 137}),
/* NxS[ 338] */ // Shortest string "LAYER\x20"
      new Table(83, 33, -1, new short[] {339, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 339}),
/* NxS[ 339] */ // Shortest string "LAYER\x20S"
      new Table(69, 33, -1, new short[] {340, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 340}),
/* NxS[ 340] */ // Shortest string "LAYER\x20SE"
      new Table(84, 33, -1, new short[] {175, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 175}),
/* NxS[ 341] */ // Shortest string "IS\x20"
      new Table(65, 55, -1, new short[] {348, 349, -1, 350, 351, -1, 
          352, -1, -1, -1, -1, 353, -1, 354, -1, -1, -1, -1, 355, -1, -1, -1, 
          356, -1, -1, -1, -1, -1, -1, -1, -1, -1, 348, 349, -1, 350, 351, -1, 
          352, -1, -1, -1, -1, 353, -1, 354, -1, -1, -1, -1, 355, -1, -1, -1, 
          356}),
/* NxS[ 342] */ // Shortest string "ISN'"
      new Table(84, 33, -1, new short[] {343, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 343}),
/* NxS[ 343] */ // Shortest string "ISN'T"
      new Table(32, 1, -1, new short[] {344}),
/* NxS[ 344] */ // Shortest string "ISN'T\x20"
      new Table(76, 33, -1, new short[] {345, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 345}),
/* NxS[ 345] */ // Shortest string "ISN'T\x20L"
      new Table(73, 33, -1, new short[] {346, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 346}),
/* NxS[ 346] */ // Shortest string "ISN'T\x20LI"
      new Table(75, 33, -1, new short[] {347, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 347}),
/* NxS[ 347] */ // Shortest string "ISN'T\x20LIK"
      new Table(69, 33, -1, new short[] {180, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 180}),
/* NxS[ 348] */ // Shortest string "IS\x20A"
      new Table(66, 33, -1, new short[] {465, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 465}),
/* NxS[ 349] */ // Shortest string "IS\x20B"
      new Table(69, 33, -1, new short[] {457, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 457}),
/* NxS[ 350] */ // Shortest string "IS\x20D"
      new Table(73, 33, -1, new short[] {446, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 446}),
/* NxS[ 351] */ // Shortest string "IS\x20E"
      new Table(65, 49, -1, new short[] {433, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 434, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 433, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 434}),
/* NxS[ 352] */ // Shortest string "IS\x20G"
      new Table(82, 33, -1, new short[] {412, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 412}),
/* NxS[ 353] */ // Shortest string "IS\x20L"
      new Table(69, 37, -1, new short[] {392, -1, -1, -1, 393, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 392, -1, -1, -1, 393}),
/* NxS[ 354] */ // Shortest string "IS\x20N"
      new Table(79, 33, -1, new short[] {376, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 376}),
/* NxS[ 355] */ // Shortest string "IS\x20S"
      new Table(79, 33, -1, new short[] {368, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 368}),
/* NxS[ 356] */ // Shortest string "IS\x20W"
      new Table(69, 37, -1, new short[] {357, -1, -1, -1, 358, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 357, -1, -1, -1, 358}),
/* NxS[ 357] */ // Shortest string "IS\x20WE"
      new Table(83, 33, -1, new short[] {362, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 362}),
/* NxS[ 358] */ // Shortest string "IS\x20WI"
      new Table(84, 33, -1, new short[] {359, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 359}),
/* NxS[ 359] */ // Shortest string "IS\x20WIT"
      new Table(72, 33, -1, new short[] {360, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 360}),
/* NxS[ 360] */ // Shortest string "IS\x20WITH"
      new Table(73, 33, -1, new short[] {361, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 361}),
/* NxS[ 361] */ // Shortest string "IS\x20WITHI"
      new Table(78, 33, -1, new short[] {181, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 181}),
/* NxS[ 362] */ // Shortest string "IS\x20WES"
      new Table(84, 33, -1, new short[] {363, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 363}),
/* NxS[ 363] */ // Shortest string "IS\x20WEST"
      new Table(32, 1, -1, new short[] {364}),
/* NxS[ 364] */ // Shortest string "IS\x20WEST\x20"
      new Table(70, 33, -1, new short[] {365, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 365}),
/* NxS[ 365] */ // Shortest string "IS\x20WEST\x20F"
      new Table(82, 33, -1, new short[] {366, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 366}),
/* NxS[ 366] */ // Shortest string "IS\x20WEST\x20FR"
      new Table(79, 33, -1, new short[] {367, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 367}),
/* NxS[ 367] */ // Shortest string "IS\x20WEST\x20FRO"
      new Table(77, 33, -1, new short[] {182, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182}),
/* NxS[ 368] */ // Shortest string "IS\x20SO"
      new Table(85, 33, -1, new short[] {369, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 369}),
/* NxS[ 369] */ // Shortest string "IS\x20SOU"
      new Table(84, 33, -1, new short[] {370, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 370}),
/* NxS[ 370] */ // Shortest string "IS\x20SOUT"
      new Table(72, 33, -1, new short[] {371, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 371}),
/* NxS[ 371] */ // Shortest string "IS\x20SOUTH"
      new Table(32, 1, -1, new short[] {372}),
/* NxS[ 372] */ // Shortest string "IS\x20SOUTH\x20"
      new Table(70, 33, -1, new short[] {373, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 373}),
/* NxS[ 373] */ // Shortest string "IS\x20SOUTH\x20F"
      new Table(82, 33, -1, new short[] {374, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 374}),
/* NxS[ 374] */ // Shortest string "IS\x20SOUTH\x20FR"
      new Table(79, 33, -1, new short[] {375, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 375}),
/* NxS[ 375] */ // Shortest string "IS\x20SOUTH\x20FRO"
      new Table(77, 33, -1, new short[] {183, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 183}),
/* NxS[ 376] */ // Shortest string "IS\x20NO"
      new Table(82, 35, -1, new short[] {377, -1, 184, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 377, -1, 184}),
/* NxS[ 377] */ // Shortest string "IS\x20NOR"
      new Table(84, 33, -1, new short[] {386, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 386}),
/* NxS[ 378] */ // Shortest string "IS\x20NOT\x20"
      new Table(69, 40, -1, new short[] {379, -1, -1, -1, -1, -1, 
          -1, 345, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 379, -1, -1, -1, -1, -1, 
          -1, 345}),
/* NxS[ 379] */ // Shortest string "IS\x20NOT\x20E"
      new Table(81, 33, -1, new short[] {380, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 380}),
/* NxS[ 380] */ // Shortest string "IS\x20NOT\x20EQ"
      new Table(85, 33, -1, new short[] {381, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 381}),
/* NxS[ 381] */ // Shortest string "IS\x20NOT\x20EQU"
      new Table(65, 33, -1, new short[] {382, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 382}),
/* NxS[ 382] */ // Shortest string "IS\x20NOT\x20EQUA"
      new Table(76, 33, -1, new short[] {383, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 383}),
/* NxS[ 383] */ // Shortest string "IS\x20NOT\x20EQUAL"
      new Table(32, 1, -1, new short[] {384}),
/* NxS[ 384] */ // Shortest string "IS\x20NOT\x20EQUAL\x20"
      new Table(84, 33, -1, new short[] {385, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 385}),
/* NxS[ 385] */ // Shortest string "IS\x20NOT\x20EQUAL\x20T"
      new Table(79, 33, -1, new short[] {185, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 185}),
/* NxS[ 386] */ // Shortest string "IS\x20NORT"
      new Table(72, 33, -1, new short[] {387, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 387}),
/* NxS[ 387] */ // Shortest string "IS\x20NORTH"
      new Table(32, 1, -1, new short[] {388}),
/* NxS[ 388] */ // Shortest string "IS\x20NORTH\x20"
      new Table(70, 33, -1, new short[] {389, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 389}),
/* NxS[ 389] */ // Shortest string "IS\x20NORTH\x20F"
      new Table(82, 33, -1, new short[] {390, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 390}),
/* NxS[ 390] */ // Shortest string "IS\x20NORTH\x20FR"
      new Table(79, 33, -1, new short[] {391, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 391}),
/* NxS[ 391] */ // Shortest string "IS\x20NORTH\x20FRO"
      new Table(77, 33, -1, new short[] {186, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 186}),
/* NxS[ 392] */ // Shortest string "IS\x20LE"
      new Table(83, 33, -1, new short[] {395, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 395}),
/* NxS[ 393] */ // Shortest string "IS\x20LI"
      new Table(75, 33, -1, new short[] {394, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 394}),
/* NxS[ 394] */ // Shortest string "IS\x20LIK"
      new Table(69, 33, -1, new short[] {35, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35}),
/* NxS[ 395] */ // Shortest string "IS\x20LES"
      new Table(83, 33, -1, new short[] {396, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 396}),
/* NxS[ 396] */ // Shortest string "IS\x20LESS"
      new Table(32, 1, -1, new short[] {397}),
/* NxS[ 397] */ // Shortest string "IS\x20LESS\x20"
      new Table(84, 33, -1, new short[] {398, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 398}),
/* NxS[ 398] */ // Shortest string "IS\x20LESS\x20T"
      new Table(72, 33, -1, new short[] {399, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 399}),
/* NxS[ 399] */ // Shortest string "IS\x20LESS\x20TH"
      new Table(65, 33, -1, new short[] {400, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 400}),
/* NxS[ 400] */ // Shortest string "IS\x20LESS\x20THA"
      new Table(78, 33, -1, new short[] {187, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 187}),
/* NxS[ 401] */ // Shortest string "IS\x20LESS\x20THAN\x20"
      new Table(79, 33, -1, new short[] {402, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 402}),
/* NxS[ 402] */ // Shortest string "IS\x20LESS\x20THAN\x20O"
      new Table(82, 33, -1, new short[] {403, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 403}),
/* NxS[ 403] */ // Shortest string "IS\x20LESS\x20THAN\x20OR"
      new Table(32, 1, -1, new short[] {404}),
/* NxS[ 404] */ // Shortest string "IS\x20LESS\x20THAN\x20OR\x20"
      new Table(69, 33, -1, new short[] {405, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 405}),
/* NxS[ 405] */ // Shortest string "IS\x20LESS\x20THAN\x20OR\x20E"
      new Table(81, 33, -1, new short[] {406, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 406}),
/* NxS[ 406] */ // Shortest string "IS\x20LESS\x20THAN\x20OR\x20EQ"
      new Table(85, 33, -1, new short[] {407, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 407}),
/* NxS[ 407] */ // Shortest string "IS\x20LESS\x20THAN\x20OR\x20EQU"
      new Table(65, 33, -1, new short[] {408, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 408}),
/* NxS[ 408] */ // Shortest string "IS\x20LESS\x20THAN\x20OR\x20EQUA"
      new Table(76, 33, -1, new short[] {409, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 409}),
/* NxS[ 409] */ // Shortest string "IS\x20LESS\x20THAN\x20OR\x20EQUAL"
      new Table(32, 1, -1, new short[] {410}),
/* NxS[ 410] */ // Shortest string "IS\x20LESS\x20THAN\x20OR\x20EQUAL\x20"
      new Table(84, 33, -1, new short[] {411, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 411}),
/* NxS[ 411] */ // Shortest string "IS\x20LESS\x20THAN\x20OR\x20EQUAL\x20T"
      new Table(79, 33, -1, new short[] {188, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 188}),
/* NxS[ 412] */ // Shortest string "IS\x20GR"
      new Table(69, 33, -1, new short[] {413, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 413}),
/* NxS[ 413] */ // Shortest string "IS\x20GRE"
      new Table(65, 33, -1, new short[] {414, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 414}),
/* NxS[ 414] */ // Shortest string "IS\x20GREA"
      new Table(84, 33, -1, new short[] {415, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 415}),
/* NxS[ 415] */ // Shortest string "IS\x20GREAT"
      new Table(69, 33, -1, new short[] {416, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 416}),
/* NxS[ 416] */ // Shortest string "IS\x20GREATE"
      new Table(82, 33, -1, new short[] {417, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 417}),
/* NxS[ 417] */ // Shortest string "IS\x20GREATER"
      new Table(32, 1, -1, new short[] {418}),
/* NxS[ 418] */ // Shortest string "IS\x20GREATER\x20"
      new Table(84, 33, -1, new short[] {419, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 419}),
/* NxS[ 419] */ // Shortest string "IS\x20GREATER\x20T"
      new Table(72, 33, -1, new short[] {420, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 420}),
/* NxS[ 420] */ // Shortest string "IS\x20GREATER\x20TH"
      new Table(65, 33, -1, new short[] {421, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 421}),
/* NxS[ 421] */ // Shortest string "IS\x20GREATER\x20THA"
      new Table(78, 33, -1, new short[] {189, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 189}),
/* NxS[ 422] */ // Shortest string "IS\x20GREATER\x20THAN\x20"
      new Table(79, 33, -1, new short[] {423, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 423}),
/* NxS[ 423] */ // Shortest string "IS\x20GREATER\x20THAN\x20O"
      new Table(82, 33, -1, new short[] {424, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 424}),
/* NxS[ 424] */ // Shortest string "IS\x20GREATER\x20THAN\x20OR"
      new Table(32, 1, -1, new short[] {425}),
/* NxS[ 425] */ // Shortest string "IS\x20GREATER\x20THAN\x20OR\x20"
      new Table(69, 33, -1, new short[] {426, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 426}),
/* NxS[ 426] */ // Shortest string "IS\x20GREATER\x20THAN\x20OR\x20E"
      new Table(81, 33, -1, new short[] {427, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 427}),
/* NxS[ 427] */ // Shortest string "IS\x20GREATER\x20THAN\x20OR\x20EQ"
      new Table(85, 33, -1, new short[] {428, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 428}),
/* NxS[ 428] */ // Shortest string "IS\x20GREATER\x20THAN\x20OR\x20EQU"
      new Table(65, 33, -1, new short[] {429, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 429}),
/* NxS[ 429] */ // Shortest string "IS\x20GREATER\x20THAN\x20OR\x20EQUA"
      new Table(76, 33, -1, new short[] {430, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 430}),
/* NxS[ 430] */ // Shortest string "IS\x20GREATER\x20THAN\x20OR\x20EQUAL"
      new Table(32, 1, -1, new short[] {431}),
/* NxS[ 431] */ // Shortest string "IS\x20GREATER\x20THAN\x20OR\x20EQUAL\x20"
      new Table(84, 33, -1, new short[] {432, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 432}),
/* NxS[ 432] */ // Shortest string "IS\x20GREATER\x20THAN\x20OR\x20EQUAL\x20T"
      new Table(79, 33, -1, new short[] {190, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 190}),
/* NxS[ 433] */ // Shortest string "IS\x20EA"
      new Table(83, 33, -1, new short[] {440, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 440}),
/* NxS[ 434] */ // Shortest string "IS\x20EQ"
      new Table(85, 33, -1, new short[] {435, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 435}),
/* NxS[ 435] */ // Shortest string "IS\x20EQU"
      new Table(65, 33, -1, new short[] {436, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 436}),
/* NxS[ 436] */ // Shortest string "IS\x20EQUA"
      new Table(76, 33, -1, new short[] {437, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 437}),
/* NxS[ 437] */ // Shortest string "IS\x20EQUAL"
      new Table(32, 1, -1, new short[] {438}),
/* NxS[ 438] */ // Shortest string "IS\x20EQUAL\x20"
      new Table(84, 33, -1, new short[] {439, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 439}),
/* NxS[ 439] */ // Shortest string "IS\x20EQUAL\x20T"
      new Table(79, 33, -1, new short[] {14, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14}),
/* NxS[ 440] */ // Shortest string "IS\x20EAS"
      new Table(84, 33, -1, new short[] {441, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 441}),
/* NxS[ 441] */ // Shortest string "IS\x20EAST"
      new Table(32, 1, -1, new short[] {442}),
/* NxS[ 442] */ // Shortest string "IS\x20EAST\x20"
      new Table(70, 33, -1, new short[] {443, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 443}),
/* NxS[ 443] */ // Shortest string "IS\x20EAST\x20F"
      new Table(82, 33, -1, new short[] {444, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 444}),
/* NxS[ 444] */ // Shortest string "IS\x20EAST\x20FR"
      new Table(79, 33, -1, new short[] {445, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 445}),
/* NxS[ 445] */ // Shortest string "IS\x20EAST\x20FRO"
      new Table(77, 33, -1, new short[] {191, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 191}),
/* NxS[ 446] */ // Shortest string "IS\x20DI"
      new Table(83, 33, -1, new short[] {447, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 447}),
/* NxS[ 447] */ // Shortest string "IS\x20DIS"
      new Table(74, 33, -1, new short[] {448, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 448}),
/* NxS[ 448] */ // Shortest string "IS\x20DISJ"
      new Table(79, 33, -1, new short[] {449, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 449}),
/* NxS[ 449] */ // Shortest string "IS\x20DISJO"
      new Table(73, 33, -1, new short[] {450, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 450}),
/* NxS[ 450] */ // Shortest string "IS\x20DISJOI"
      new Table(78, 33, -1, new short[] {451, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 451}),
/* NxS[ 451] */ // Shortest string "IS\x20DISJOIN"
      new Table(84, 33, -1, new short[] {452, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 452}),
/* NxS[ 452] */ // Shortest string "IS\x20DISJOINT"
      new Table(32, 1, -1, new short[] {453}),
/* NxS[ 453] */ // Shortest string "IS\x20DISJOINT\x20"
      new Table(70, 33, -1, new short[] {454, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 454}),
/* NxS[ 454] */ // Shortest string "IS\x20DISJOINT\x20F"
      new Table(82, 33, -1, new short[] {455, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 455}),
/* NxS[ 455] */ // Shortest string "IS\x20DISJOINT\x20FR"
      new Table(79, 33, -1, new short[] {456, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 456}),
/* NxS[ 456] */ // Shortest string "IS\x20DISJOINT\x20FRO"
      new Table(77, 33, -1, new short[] {192, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 192}),
/* NxS[ 457] */ // Shortest string "IS\x20BE"
      new Table(76, 33, -1, new short[] {458, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 458}),
/* NxS[ 458] */ // Shortest string "IS\x20BEL"
      new Table(79, 33, -1, new short[] {459, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 459}),
/* NxS[ 459] */ // Shortest string "IS\x20BELO"
      new Table(87, 33, -1, new short[] {460, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 460}),
/* NxS[ 460] */ // Shortest string "IS\x20BELOW"
      new Table(32, 1, -1, new short[] {461}),
/* NxS[ 461] */ // Shortest string "IS\x20BELOW\x20"
      new Table(70, 33, -1, new short[] {462, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 462}),
/* NxS[ 462] */ // Shortest string "IS\x20BELOW\x20F"
      new Table(82, 33, -1, new short[] {463, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 463}),
/* NxS[ 463] */ // Shortest string "IS\x20BELOW\x20FR"
      new Table(79, 33, -1, new short[] {464, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 464}),
/* NxS[ 464] */ // Shortest string "IS\x20BELOW\x20FRO"
      new Table(77, 33, -1, new short[] {193, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 193}),
/* NxS[ 465] */ // Shortest string "IS\x20AB"
      new Table(79, 33, -1, new short[] {466, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 466}),
/* NxS[ 466] */ // Shortest string "IS\x20ABO"
      new Table(86, 33, -1, new short[] {467, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 467}),
/* NxS[ 467] */ // Shortest string "IS\x20ABOV"
      new Table(69, 33, -1, new short[] {468, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 468}),
/* NxS[ 468] */ // Shortest string "IS\x20ABOVE"
      new Table(32, 1, -1, new short[] {469}),
/* NxS[ 469] */ // Shortest string "IS\x20ABOVE\x20"
      new Table(70, 33, -1, new short[] {470, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 470}),
/* NxS[ 470] */ // Shortest string "IS\x20ABOVE\x20F"
      new Table(82, 33, -1, new short[] {471, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 471}),
/* NxS[ 471] */ // Shortest string "IS\x20ABOVE\x20FR"
      new Table(79, 33, -1, new short[] {472, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 472}),
/* NxS[ 472] */ // Shortest string "IS\x20ABOVE\x20FRO"
      new Table(77, 33, -1, new short[] {194, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 194}),
/* NxS[ 473] */ // Shortest string "INTERSECTS\x20"
      new Table(87, 33, -1, new short[] {474, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 474}),
/* NxS[ 474] */ // Shortest string "INTERSECTS\x20W"
      new Table(73, 33, -1, new short[] {475, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 475}),
/* NxS[ 475] */ // Shortest string "INTERSECTS\x20WI"
      new Table(84, 33, -1, new short[] {476, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 476}),
/* NxS[ 476] */ // Shortest string "INTERSECTS\x20WIT"
      new Table(72, 33, -1, new short[] {203, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 203}),
/* NxS[ 477] */ // Shortest string "DOES\x20"
      new Table(78, 33, -1, new short[] {491, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 491}),
/* NxS[ 478] */ // Shortest string "DOESN'"
      new Table(84, 33, -1, new short[] {479, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 479}),
/* NxS[ 479] */ // Shortest string "DOESN'T"
      new Table(32, 1, -1, new short[] {480}),
/* NxS[ 480] */ // Shortest string "DOESN'T\x20"
      new Table(67, 35, -1, new short[] {481, -1, 482, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 481, -1, 482}),
/* NxS[ 481] */ // Shortest string "DOESN'T\x20C"
      new Table(79, 33, -1, new short[] {486, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 486}),
/* NxS[ 482] */ // Shortest string "DOESN'T\x20E"
      new Table(81, 33, -1, new short[] {483, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 483}),
/* NxS[ 483] */ // Shortest string "DOESN'T\x20EQ"
      new Table(85, 33, -1, new short[] {484, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 484}),
/* NxS[ 484] */ // Shortest string "DOESN'T\x20EQU"
      new Table(65, 33, -1, new short[] {485, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 485}),
/* NxS[ 485] */ // Shortest string "DOESN'T\x20EQUA"
      new Table(76, 33, -1, new short[] {185, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 185}),
/* NxS[ 486] */ // Shortest string "DOESN'T\x20CO"
      new Table(78, 33, -1, new short[] {487, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 487}),
/* NxS[ 487] */ // Shortest string "DOESN'T\x20CON"
      new Table(84, 33, -1, new short[] {488, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 488}),
/* NxS[ 488] */ // Shortest string "DOESN'T\x20CONT"
      new Table(65, 33, -1, new short[] {489, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 489}),
/* NxS[ 489] */ // Shortest string "DOESN'T\x20CONTA"
      new Table(73, 33, -1, new short[] {490, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 490}),
/* NxS[ 490] */ // Shortest string "DOESN'T\x20CONTAI"
      new Table(78, 33, -1, new short[] {180, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 180}),
/* NxS[ 491] */ // Shortest string "DOES\x20N"
      new Table(79, 33, -1, new short[] {478, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 478}),
/* NxS[ 492] */ // Shortest string "DESCRIBED\x20"
      new Table(65, 33, -1, new short[] {493, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 493}),
/* NxS[ 493] */ // Shortest string "DESCRIBED\x20A"
      new Table(83, 33, -1, new short[] {248, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 248}),
/* NxS[ 494] */ // Shortest string "+.E"
      new Table(43, 15, -1, new short[] {303, -1, 303, -1, -1, 303, 
          303, 303, 303, 303, 303, 303, 303, 303, 303}),
/* NxS[ 495] */ // Shortest string ".."
      new Table(46, 56, -1, new short[] {495, -1, 495, 495, 495, 495, 
          495, 495, 495, 495, 495, 495, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 494, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 494}),
/* NxS[ 496] */ // Shortest string ".F"
      new Table(46, 1, -1, new short[] {305}),
/* NxS[ 497] */ // Shortest string "\"'"
      new Table(39, 1, -1, new short[] {312}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = (byte)(code - NxS[state].min);
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     internal Scanner(Stream file) {
            SetSource(file); // no unicode option
        }   
#endif // !NOFILES

     internal Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
            try {
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    Result rslt = Result.noMatch;
#endif // BACKUP
#if LEFTANCHORS
                    for (;;)
                    {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) 
                            break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart)
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();
                    
                    while ((next = NextState()) > eofNum) // Exit for goStart AND for eofNum
#if BACKUP
                        if (state <= maxAccept && next > maxAccept) // need to prepare backup data
                        {
                            // ctx is an object. The fields may be 
                            // mutated by the call to Recurse2.
                            // On return the data in ctx is the
                            // *latest* accept state that was found.
                            
                            rslt = Recurse2(ref ctx, next);
                            if (rslt == Result.noMatch) 
                                RestoreStateAndPos(ref ctx);
                            break;
                        }
                        else
#endif // BACKUP
                        {
                            state = next;
                            GetCode();
                        }
                    if (state <= maxAccept) 
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1: // Recognized '[\0]+',	Shortest string ""
{}
            break;
        case 2: // Recognized '"\t"',	Shortest string "\t"
{}
            break;
        case 3: // Recognized '[\n]',	Shortest string "\n"
{}
            break;
        case 4: // Recognized '[\r]',	Shortest string "\r"
{}
            break;
        case 5: // Recognized '" "',	Shortest string "\x20"
{}
            break;
        case 6: // Recognized '"("',	Shortest string "("
return ('(');
            break;
        case 7: // Recognized '")"',	Shortest string ")"
return (')');
            break;
        case 8: // Recognized '","',	Shortest string ","
return (',');
            break;
        case 9: // Recognized '[\-\+]?[0-9]*[\.][0-9]*',	Shortest string "."
        case 301: // Recognized '[\-\+]?[0-9]*[\.][0-9]*',	Shortest string "+."
        case 303: // Recognized '[\-\+\.0-9][\.0-9]+E[\-\+0-9][0-9]*',	Shortest string "+.E+"
return (int)SetValue(Tokens.DOUBLE);
            break;
        case 10: // Recognized '[\-\+]?[0-9]+',	Shortest string "0"
        case 302: // Recognized '[\-\+]?[0-9]+',	Shortest string "+0"
return (int)SetValue(Tokens.INTEGER);
            break;
        case 11: // Recognized '":"',	Shortest string ":"
return (':');
            break;
        case 12: // Recognized '";"',	Shortest string ";"
return (';');
            break;
        case 13: // Recognized '"<"',	Shortest string "<"
        case 187: // Recognized '"is less than"',	Shortest string "IS\x20LESS\x20THAN"
return ((int)Tokens.OP_LT);
            break;
        case 14: // Recognized '"="',	Shortest string "="
        case 177: // Recognized '"is"',	Shortest string "IS"
        case 227: // Recognized '"equals"',	Shortest string "EQUALS"
return ((int)Tokens.OP_EQ);
            break;
        case 15: // Recognized '">"',	Shortest string ">"
        case 189: // Recognized '"is greater than"',	Shortest string "IS\x20GREATER\x20THAN"
return ((int)Tokens.OP_GT);
            break;
        case 16: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "A"
        case 17: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "B"
        case 18: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "C"
        case 19: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "D"
        case 20: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "E"
        case 21: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "F"
        case 22: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "G"
        case 23: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "I"
        case 24: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "L"
        case 25: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "M"
        case 26: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "N"
        case 27: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "O"
        case 28: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "P"
        case 29: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "R"
        case 30: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "S"
        case 31: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "T"
        case 32: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "U"
        case 33: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "V"
        case 34: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "W"
        case 37: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "WH"
        case 38: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "WI"
        case 39: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "WIT"
        case 40: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "WITH"
        case 42: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "WHE"
        case 43: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "WHER"
        case 45: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "VA"
        case 46: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "VAL"
        case 47: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "VALI"
        case 48: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "VALID"
        case 49: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "VALIDA"
        case 50: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "VALIDAT"
        case 52: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "UN"
        case 53: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "UND"
        case 54: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "UNK"
        case 55: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "UNKN"
        case 56: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "UNKNO"
        case 57: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "UNKNOW"
        case 59: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "UNDE"
        case 60: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "UNDEF"
        case 61: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "UNDEFI"
        case 62: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "UNDEFIN"
        case 63: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "UNDEFINE"
        case 64: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "TH"
        case 66: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "TR"
        case 67: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "TY"
        case 68: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "TYP"
        case 70: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "TRU"
        case 72: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "TOU"
        case 73: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "TOUC"
        case 74: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "TOUCH"
        case 75: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "TOUCHE"
        case 77: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "THI"
        case 78: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "THIC"
        case 79: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "THICK"
        case 80: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "THICKN"
        case 81: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "THICKNE"
        case 82: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "THICKNES"
        case 84: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SA"
        case 85: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SE"
        case 86: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SP"
        case 87: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SPA"
        case 88: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SPAT"
        case 89: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SPATI"
        case 90: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SPATIA"
        case 91: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SPATIAL"
        case 92: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SPATIALY"
        case 94: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SEL"
        case 96: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SELE"
        case 97: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SELEC"
        case 99: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "SAV"
        case 101: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "RE"
        case 102: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "REL"
        case 103: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "REM"
        case 104: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "REMO"
        case 105: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "REMOV"
        case 107: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "RELA"
        case 108: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "RELAT"
        case 109: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "RELATE"
        case 110: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "RELATES"
        case 112: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PR"
        case 113: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PRE"
        case 114: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PRO"
        case 115: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PROP"
        case 116: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PROPE"
        case 117: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PROPER"
        case 118: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PROPERT"
        case 119: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PROPERTY"
        case 120: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PROPERTY_"
        case 121: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PROPERTYS"
        case 122: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PROPERTYSE"
        case 125: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PRED"
        case 126: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PREDE"
        case 127: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PREDEF"
        case 128: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PREDEFI"
        case 129: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PREDEFIN"
        case 130: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PREDEFINE"
        case 131: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PREDEFINED"
        case 132: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PREDEFINED_"
        case 133: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PREDEFINEDT"
        case 134: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PREDEFINEDTY"
        case 135: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "PREDEFINEDTYP"
        case 138: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "OP"
        case 140: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "OV"
        case 141: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "OVE"
        case 142: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "OVER"
        case 143: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "OVERL"
        case 144: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "OVERLA"
        case 145: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "OVERLAP"
        case 147: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "OPE"
        case 149: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "NA"
        case 150: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "NE"
        case 151: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "NU"
        case 152: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "NUL"
        case 154: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "NAM"
        case 156: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "MA"
        case 157: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "MO"
        case 158: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "MOD"
        case 159: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "MODE"
        case 161: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "MAT"
        case 162: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "MATE"
        case 163: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "MATER"
        case 164: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "MATERI"
        case 165: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "MATERIA"
        case 167: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "LA"
        case 168: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "LAY"
        case 169: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "LAYE"
        case 170: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "LAYER"
        case 171: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "LAYER_"
        case 172: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "LAYERS"
        case 173: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "LAYERSE"
        case 179: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "ISN"
        case 195: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "INT"
        case 196: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "INTE"
        case 197: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "INTER"
        case 198: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "INTERS"
        case 199: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "INTERSE"
        case 200: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "INTERSEC"
        case 201: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "INTERSECT"
        case 202: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "INTERSECTS"
        case 204: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "GR"
        case 205: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "GRO"
        case 206: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "GROU"
        case 208: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "FA"
        case 209: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "FI"
        case 210: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "FO"
        case 211: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "FR"
        case 212: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "FRO"
        case 215: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "FIL"
        case 217: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "FAL"
        case 218: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "EQ"
        case 219: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "EX"
        case 220: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "EXP"
        case 221: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "EXPO"
        case 222: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "EXPOR"
        case 224: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "EQU"
        case 225: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "EQUA"
        case 226: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "EQUAL"
        case 228: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DE"
        case 229: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DO"
        case 230: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DU"
        case 231: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DUM"
        case 232: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DOE"
        case 233: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DOES"
        case 234: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DOESN"
        case 235: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DEF"
        case 236: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DES"
        case 237: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DESC"
        case 238: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DESCR"
        case 239: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DESCRI"
        case 240: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DESCRIB"
        case 241: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DESCRIP"
        case 242: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DESCRIPT"
        case 243: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DESCRIPTI"
        case 244: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DESCRIPTIO"
        case 246: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DESCRIBE"
        case 247: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DESCRIBED"
        case 249: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DEFI"
        case 250: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DEFIN"
        case 251: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "DEFINE"
        case 253: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CA"
        case 254: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CL"
        case 255: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CO"
        case 256: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CR"
        case 257: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CRE"
        case 258: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CRO"
        case 259: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CROS"
        case 260: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CROSS"
        case 261: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CROSSE"
        case 263: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CREA"
        case 264: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CREAT"
        case 266: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CON"
        case 267: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "COU"
        case 268: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "COUN"
        case 270: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CONT"
        case 271: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CONTA"
        case 272: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CONTAI"
        case 273: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CONTAIN"
        case 275: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLA"
        case 276: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLE"
        case 277: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLO"
        case 278: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLOS"
        case 280: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLEA"
        case 282: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLAS"
        case 283: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLASS"
        case 284: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLASSI"
        case 285: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLASSIF"
        case 286: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLASSIFI"
        case 287: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLASSIFIC"
        case 288: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLASSIFICA"
        case 289: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLASSIFICAT"
        case 290: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLASSIFICATI"
        case 291: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CLASSIFICATIO"
        case 293: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CAL"
        case 294: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CALL"
        case 295: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "CALLE"
        case 297: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "AD"
        case 298: // Recognized '[a-z]+[a-z_\-0-9]*',	Shortest string "AN"
return (int)ProcessString();
            break;
        case 35: // Recognized '"~"',	Shortest string "~"
        case 274: // Recognized '"contains"',	Shortest string "CONTAINS"
return ((int)Tokens.OP_CONTAINS);
            break;
        case 36: // Recognized '"||"',	Shortest string "||"
        case 139: // Recognized '"or"',	Shortest string "OR"
return ((int)Tokens.OP_OR);
            break;
        case 41: // Recognized '"with name"',	Shortest string "WITH\x20NAME"
        case 296: // Recognized '"called"',	Shortest string "CALLED"
return (int)Tokens.WITH_NAME;
            break;
        case 44: // Recognized '"where"',	Shortest string "WHERE"
return (int)Tokens.WHERE;
            break;
        case 51: // Recognized '"validate"',	Shortest string "VALIDATE"
return (int)Tokens.VALIDATE;
            break;
        case 58: // Recognized '"unknown"',	Shortest string "NULL"
return (int)Tokens.NONDEF;
            break;
        case 65: // Recognized '"to"',	Shortest string "TO"
return (int)Tokens.TO;
            break;
        case 69: // Recognized '"type"',	Shortest string "TYPE"
return (int)Tokens.TYPE;
            break;
        case 71: // Recognized 'true',	Shortest string "TRUE"
        case 305: // Recognized '".T."',	Shortest string ".F."
return (int)SetValue(Tokens.BOOLEAN);
            break;
        case 76: // Recognized '"touches"',	Shortest string "TOUCHES"
return ((int)Tokens.TOUCHES);
            break;
        case 83: // Recognized '"thickness"',	Shortest string "THICKNESS"
return (int)Tokens.THICKNESS;
            break;
        case 93: // Recognized '"spatialy equals"',	Shortest string "SPATIALY\x20EQUALS"
return ((int)Tokens.SPATIALLY_EQUALS);
            break;
        case 95: // Recognized '"set"',	Shortest string "SET"
return (int)Tokens.SET;
            break;
        case 98: // Recognized '"select"',	Shortest string "SELECT"
return (int)Tokens.SELECT;
            break;
        case 100: // Recognized '"save"',	Shortest string "SAVE"
return (int)Tokens.SAVE;
            break;
        case 106: // Recognized '"remove"',	Shortest string "REMOVE"
return (int)Tokens.REMOVE;
            break;
        case 111: // Recognized '"relates to"',	Shortest string "RELATES\x20TO"
return ((int)Tokens.RELATE);
            break;
        case 123: // Recognized '"property_set"',	Shortest string "PROPERTYSET"
        case 124: // Recognized '"property set"',	Shortest string "PROPERTY\x20SET"
return (int)Tokens.PROPERTY_SET;
            break;
        case 136: // Recognized '"predefined_type"',	Shortest string "PREDEFINEDTYPE"
        case 137: // Recognized '"predefined type"',	Shortest string "PREDEFINED\x20TYPE"
return (int)Tokens.PREDEFINED_TYPE;
            break;
        case 146: // Recognized '"overlaps"',	Shortest string "OVERLAPS"
return ((int)Tokens.OVERLAPS);
            break;
        case 148: // Recognized '"open"',	Shortest string "OPEN"
return (int)Tokens.OPEN;
            break;
        case 153: // Recognized '"new"',	Shortest string "NEW"
return (int)Tokens.NEW;
            break;
        case 155: // Recognized '"name"',	Shortest string "NAME"
return (int)Tokens.NAME;
            break;
        case 160: // Recognized '"model"',	Shortest string "MODEL"
return (int)Tokens.MODEL;
            break;
        case 166: // Recognized '"material"',	Shortest string "MATERIAL"
return (int)SetValue(Tokens.MATERIAL);
            break;
        case 174: // Recognized '"layer_set"',	Shortest string "LAYERSET"
        case 175: // Recognized '"layer set"',	Shortest string "LAYER\x20SET"
return (int)Tokens.LAYER_SET;
            break;
        case 176: // Recognized '"in"',	Shortest string "IN"
return (int)Tokens.IN;
            break;
        case 178: // Recognized '"it"',	Shortest string "IT"
return (int)Tokens.IT;
            break;
        case 180: // Recognized '"isn't like"',	Shortest string "!~"
return ((int)Tokens.OP_NOT_CONTAINS);
            break;
        case 181: // Recognized '"is within"',	Shortest string "IS\x20WITHIN"
return ((int)Tokens.WITHIN);
            break;
        case 182: // Recognized '"is west from"',	Shortest string "IS\x20WEST\x20FROM"
return ((int)Tokens.WEST_OF);
            break;
        case 183: // Recognized '"is south from"',	Shortest string "IS\x20SOUTH\x20FROM"
return ((int)Tokens.SOUTH_OF);
            break;
        case 184: // Recognized '"is not"',	Shortest string "IS\x20NOT"
        case 185: // Recognized '"is not equal to"',	Shortest string "!="
return ((int)Tokens.OP_NEQ);
            break;
        case 186: // Recognized '"is north from"',	Shortest string "IS\x20NORTH\x20FROM"
return ((int)Tokens.NORTH_OF);
            break;
        case 188: // Recognized '"is less than or equal to"',	Shortest string "<="
return ((int)Tokens.OP_LTQ);
            break;
        case 190: // Recognized '"is greater than or equal to"',	Shortest string ">="
return ((int)Tokens.OP_GTE);
            break;
        case 191: // Recognized '"is east from"',	Shortest string "IS\x20EAST\x20FROM"
return ((int)Tokens.EAST_OF);
            break;
        case 192: // Recognized '"is disjoint from"',	Shortest string "IS\x20DISJOINT\x20FROM"
return ((int)Tokens.DISJOINT);
            break;
        case 193: // Recognized '"is below from"',	Shortest string "IS\x20BELOW\x20FROM"
return ((int)Tokens.BELOW);
            break;
        case 194: // Recognized '"is above from"',	Shortest string "IS\x20ABOVE\x20FROM"
return ((int)Tokens.ABOVE);
            break;
        case 203: // Recognized '"intersects with"',	Shortest string "INTERSECTS\x20WITH"
return ((int)Tokens.INTERSECTS);
            break;
        case 207: // Recognized '"group"',	Shortest string "GROUP"
return (int)SetValue(Tokens.GROUP);
            break;
        case 213: // Recognized '"from"',	Shortest string "FROM"
return (int)Tokens.FROM;
            break;
        case 214: // Recognized '"for"',	Shortest string "FOR"
return (int)Tokens.FOR;
            break;
        case 216: // Recognized '"file"',	Shortest string "FILE"
return (int)Tokens.FILE;
            break;
        case 223: // Recognized '"export"',	Shortest string "DUMP"
return (int)Tokens.DUMP;
            break;
        case 245: // Recognized '"description"',	Shortest string "DESCRIPTION"
        case 248: // Recognized '"described as"',	Shortest string "DESCRIBED\x20AS"
return (int)Tokens.DESCRIPTION ;
            break;
        case 252: // Recognized '"defined"',	Shortest string "DEFINED"
return (int)Tokens.DEFINED;
            break;
        case 262: // Recognized '"crosses"',	Shortest string "CROSSES"
return ((int)Tokens.CROSSES);
            break;
        case 265: // Recognized '"create"',	Shortest string "CREATE"
return (int)Tokens.CREATE;
            break;
        case 269: // Recognized '"count"',	Shortest string "COUNT"
return (int)Tokens.COUNT;
            break;
        case 279: // Recognized '"close"',	Shortest string "CLOSE"
return (int)Tokens.CLOSE;
            break;
        case 281: // Recognized '"clear"',	Shortest string "CLEAR"
return (int)Tokens.CLEAR;
            break;
        case 292: // Recognized '"classification"',	Shortest string "CLASSIFICATION"
return (int)Tokens.CLASSIFICATION;
            break;
        case 299: // Recognized '"and"',	Shortest string "AND"
        case 307: // Recognized '"&&"',	Shortest string "&&"
return ((int)Tokens.OP_AND);
            break;
        case 300: // Recognized '"add"',	Shortest string "ADD"
return (int)Tokens.ADD;
            break;
        case 304: // Recognized '\/\/[^\r\n]*',	Shortest string "//"
{}
            break;
        case 306: // Recognized '[\']([\n]|[\000\011-\046\050-\176\201-\237\240-\377]|[\047][\047])*[\']',	Shortest string "''"
return (int)SetValue();
            break;
        case 308: // Recognized '"$"[a-z$][a-z0-9_]*',	Shortest string "$$"
return (int)SetValue(Tokens.IDENTIFIER);
            break;
        case 309: // Recognized '[\"]([\n]|[\000\011-\046\050-\176\201-\237\240-\377]|[\047][\047])*[\"]',	Shortest string "\"\""
return (int)SetValue();
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
            } // end try
            finally {
// User-specified epilog to scan()
yylloc = new LexLocation(tokLin,tokCol,tokELin,tokECol);
// End, user-specified epilog
            } // end finally
        }

#if BACKUP
        Result Recurse2(ref Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, code) != goStart AND
            //         NextState(state, code) is not an accept state.
            //
            SaveStateAndPos(ref ctx);
            state = next;
            GetCode();

            while ((next = NextState()) > eofNum)
            {
                if (state <= maxAccept && next > maxAccept) // need to update backup data
                    SaveStateAndPos(ref ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetCode(); 
            }
            return (state <= maxAccept ? Result.accept : Result.noMatch);
        }

        void SaveStateAndPos(ref Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx)
        {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }

#endif // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner

// ==============================================================
// <auto-generated>
// This code automatically produced from an embedded resource.
// Do not edit this file, or it will become incompatible with 
// the specification from which it was generated.
// </auto-generated>
// ==============================================================

// Code copied from GPLEX embedded resource
    [Serializable]
    public class BufferException : Exception
    {
        public BufferException() { }
        public BufferException(string message) : base(message) { }
        public BufferException(string message, Exception innerException)
            : base(message, innerException) { }
        protected BufferException(SerializationInfo info, StreamingContext context)
            : base(info, context) { }
    }

    public abstract class ScanBuff
    {
        private string fileNm;

        public const int EndOfFile = -1;
        public const int UnicodeReplacementChar = 0xFFFD;

        public bool IsFile { get { return (fileNm != null); } }
        public string FileName { get { return fileNm; } set { fileNm = value; } }

        public abstract int Pos { get; set; }
        public abstract int Read();
        public virtual void Mark() { }

        public abstract string GetString(int begin, int limit);

        public static ScanBuff GetBuffer(string source)
        {
            return new StringBuffer(source);
        }

        public static ScanBuff GetBuffer(IList<string> source)
        {
            return new LineBuffer(source);
        }

#if (!NOFILES)
        public static ScanBuff GetBuffer(Stream source)
        {
            return new BuildBuffer(source);
        }

#if (!BYTEMODE)
        public static ScanBuff GetBuffer(Stream source, int fallbackCodePage)
        {
            return new BuildBuffer(source, fallbackCodePage);
        }
#endif // !BYTEMODE
#endif // !NOFILES
    }

    #region Buffer classes

    // ==============================================================
    // =====  Definitions for various ScanBuff derived classes   ====
    // ==============================================================
    // ===============         String input          ================
    // ==============================================================

    /// <summary>
    /// This class reads characters from a single string as
    /// required, for example, by Visual Studio language services
    /// </summary>
    sealed class StringBuffer : ScanBuff
    {
        string str;        // input buffer
        int bPos;          // current position in buffer
        int sLen;

        public StringBuffer(string source)
        {
            this.str = source;
            this.sLen = source.Length;
            this.FileName = null;
        }

        public override int Read()
        {
            if (bPos < sLen) return str[bPos++];
            else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see new line
            else { bPos++; return EndOfFile; }                // two strikes and you're out!
        }

        public override string GetString(int begin, int limit)
        {
            //  "limit" can be greater than sLen with the BABEL
            //  option set.  Read returns a "virtual" EOL if
            //  an attempt is made to read past the end of the
            //  string buffer.  Without the guard any attempt 
            //  to fetch yytext for a token that includes the 
            //  EOL will throw an index exception.
            if (limit > sLen) limit = sLen;
            if (limit <= begin) return "";
            else return str.Substring(begin, limit - begin);
        }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }

        public override string ToString() { return "StringBuffer"; }
    }

    // ==============================================================
    //  The LineBuff class contributed by Nigel Horspool, 
    //  nigelh@cs.uvic.cs
    // ==============================================================

    sealed class LineBuffer : ScanBuff
    {
        IList<string> line;    // list of source lines from a file
        int numLines;          // number of strings in line list
        string curLine;        // current line in that list
        int cLine;             // index of current line in the list
        int curLen;            // length of current line
        int curLineStart;      // position of line start in whole file
        int curLineEnd;        // position of line end in whole file
        int maxPos;            // max position ever visited in whole file
        int cPos;              // ordinal number of code in source

        // Constructed from a list of strings, one per source line.
        // The lines have had trailing '\n' characters removed.
        public LineBuffer(IList<string> lineList)
        {
            line = lineList;
            numLines = line.Count;
            cPos = curLineStart = 0;
            curLine = (numLines > 0 ? line[0] : "");
            maxPos = curLineEnd = curLen = curLine.Length;
            cLine = 1;
            FileName = null;
        }

        public override int Read()
        {
            if (cPos < curLineEnd)
                return curLine[cPos++ - curLineStart];
            if (cPos++ == curLineEnd)
                return '\n';
            if (cLine >= numLines)
                return EndOfFile;
            curLine = line[cLine];
            curLen = curLine.Length;
            curLineStart = curLineEnd + 1;
            curLineEnd = curLineStart + curLen;
            if (curLineEnd > maxPos)
                maxPos = curLineEnd;
            cLine++;
            return curLen > 0 ? curLine[0] : '\n';
        }

        // To speed up searches for the line containing a position
        private int cachedPosition;
        private int cachedIxdex;
        private int cachedLineStart;

        // Given a position pos within the entire source, the results are
        //   ix     -- the index of the containing line
        //   lstart -- the position of the first character on that line
        private void findIndex(int pos, out int ix, out int lstart)
        {
            if (pos >= cachedPosition)
            {
                ix = cachedIxdex; lstart = cachedLineStart;
            }
            else
            {
                ix = lstart = 0;
            }
            while (ix < numLines)
            {
                int len = line[ix].Length + 1;
                if (pos < lstart + len) break;
                lstart += len;
                ix++;
            }
            cachedPosition = pos;
            cachedIxdex = ix;
            cachedLineStart = lstart;
        }

        public override string GetString(int begin, int limit)
        {
            if (begin >= maxPos || limit <= begin) return "";
            int endIx, begIx, endLineStart, begLineStart;
            findIndex(begin, out begIx, out begLineStart);
            int begCol = begin - begLineStart;
            findIndex(limit, out endIx, out endLineStart);
            int endCol = limit - endLineStart;
            string s = line[begIx];
            if (begIx == endIx)
            {
                // the usual case, substring all on one line
                return (endCol <= s.Length) ?
                    s.Substring(begCol, endCol - begCol)
                    : s.Substring(begCol) + "\n";
            }
            // the string spans multiple lines, yuk!
            StringBuilder sb = new StringBuilder();
            if (begCol < s.Length)
                sb.Append(s.Substring(begCol));
            for (; ; )
            {
                sb.Append("\n");
                s = line[++begIx];
                if (begIx >= endIx) break;
                sb.Append(s);
            }
            if (endCol <= s.Length)
            {
                sb.Append(s.Substring(0, endCol));
            }
            else
            {
                sb.Append(s);
                sb.Append("\n");
            }
            return sb.ToString();
        }

        public override int Pos
        {
            get { return cPos; }
            set
            {
                cPos = value;
                findIndex(cPos, out cLine, out curLineStart);
                // cLine should be the *next* line after curLine.
                curLine = (cLine < numLines ? line[cLine++] : "");
                curLineEnd = curLineStart + curLine.Length;
            }
        }

        public override string ToString() { return "LineBuffer"; }
    }

#if (!NOFILES)
    // ==============================================================
    // =====     class BuildBuff : for unicode text files    ========
    // ==============================================================

    class BuildBuffer : ScanBuff
    {
        // Double buffer for char stream.
        class BufferElement
        {
            StringBuilder bldr = new StringBuilder();
            StringBuilder next = new StringBuilder();
            int minIx;
            int maxIx;
            int brkIx;
            bool appendToNext;

            internal BufferElement() { }

            internal int MaxIndex { get { return maxIx; } }
            // internal int MinIndex { get { return minIx; } }

            internal char this[int index]
            {
                get
                {
                    if (index < minIx || index >= maxIx)
                        throw new BufferException("Index was outside data buffer");
                    else if (index < brkIx)
                        return bldr[index - minIx];
                    else
                        return next[index - brkIx];
                }
            }

            internal void Append(char[] block, int count)
            {
                maxIx += count;
                if (appendToNext)
                    this.next.Append(block, 0, count);
                else
                {
                    this.bldr.Append(block, 0, count);
                    brkIx = maxIx;
                    appendToNext = true;
                }
            }

            internal string GetString(int start, int limit)
            {
                if (limit <= start)
                    return "";
                if (start >= minIx && limit <= maxIx)
                    if (limit < brkIx) // String entirely in bldr builder
                        return bldr.ToString(start - minIx, limit - start);
                    else if (start >= brkIx) // String entirely in next builder
                        return next.ToString(start - brkIx, limit - start);
                    else // Must do a string-concatenation
                        return
                            bldr.ToString(start - minIx, brkIx - start) +
                            next.ToString(0, limit - brkIx);
                else
                    throw new BufferException("String was outside data buffer");
            }

            internal void Mark(int limit)
            {
                if (limit > brkIx + 16) // Rotate blocks
                {
                    StringBuilder temp = bldr;
                    bldr = next;
                    next = temp;
                    next.Length = 0;
                    minIx = brkIx;
                    brkIx = maxIx;
                }
            }
        }

        BufferElement data = new BufferElement();

        int bPos;            // Postion index in the StringBuilder
        BlockReader NextBlk; // Delegate that serves char-arrays;

        private string EncodingName
        {
            get
            {
                StreamReader rdr = NextBlk.Target as StreamReader;
                return (rdr == null ? "raw-bytes" : rdr.CurrentEncoding.BodyName);
            }
        }

        public BuildBuffer(Stream stream)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Raw(stream);
        }

#if (!BYTEMODE)
        public BuildBuffer(Stream stream, int fallbackCodePage)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Get(stream, fallbackCodePage);
        }
#endif

        /// <summary>
        /// Marks a conservative lower bound for the buffer,
        /// allowing space to be reclaimed.  If an application 
        /// needs to call GetString at arbitrary past locations 
        /// in the input stream, Mark() is not called.
        /// </summary>
        public override void Mark() { data.Mark(bPos - 2); }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }


        /// <summary>
        /// Read returns the ordinal number of the next char, or 
        /// EOF (-1) for an end of stream.  Note that the next
        /// code point may require *two* calls of Read().
        /// </summary>
        /// <returns></returns>
        public override int Read()
        {
            //
            //  Characters at positions 
            //  [data.offset, data.offset + data.bldr.Length)
            //  are available in data.bldr.
            //
            if (bPos < data.MaxIndex)
            {
                // ch0 cannot be EOF
                return (int)data[bPos++];
            }
            else // Read from underlying stream
            {
                // Experimental code, blocks of page size
                char[] chrs = new char[4096];
                int count = NextBlk(chrs, 0, 4096);
                if (count == 0)
                    return EndOfFile;
                else
                {
                    data.Append(chrs, count);
                    return (int)data[bPos++];
                }
            }
        }

        public override string GetString(int begin, int limit)
        {
            return data.GetString(begin, limit);
        }

        public override string ToString()
        {
            return "StringBuilder buffer, encoding: " + this.EncodingName;
        }
    }

    // =============== End ScanBuff-derived classes ==================

    public delegate int BlockReader(char[] block, int index, int number);

    // A delegate factory, serving up a delegate that
    // reads a block of characters from the underlying
    // encoded stream, via a StreamReader object.
    //
    public static class BlockReaderFactory
    {
        public static BlockReader Raw(Stream stream)
        {
            return delegate(char[] block, int index, int number)
            {
                byte[] b = new byte[number];
                int count = stream.Read(b, 0, number);
                int i = 0;
                int j = index;
                for (; i < count; i++, j++)
                    block[j] = (char)b[i];
                return count;
            };
        }

#if (!BYTEMODE)
        public static BlockReader Get(Stream stream, int fallbackCodePage)
        {
            Encoding encoding;
            int preamble = Preamble(stream);

            if (preamble != 0)  // There is a valid BOM here!
                encoding = Encoding.GetEncoding(preamble);
            else if (fallbackCodePage == -1) // Fallback is "raw" bytes
                return Raw(stream);
            else if (fallbackCodePage != -2) // Anything but "guess"
                encoding = Encoding.GetEncoding(fallbackCodePage);
            else // This is the "guess" option
            {
                int guess = new Guesser(stream).GuessCodePage();
                stream.Seek(0, SeekOrigin.Begin);
                if (guess == -1) // ==> this is a 7-bit file
                    encoding = Encoding.ASCII;
                else if (guess == 65001)
                    encoding = Encoding.UTF8;
                else             // ==> use the machine default
                    encoding = Encoding.Default;
            }
            StreamReader reader = new StreamReader(stream, encoding);
            return reader.Read;
        }

        static int Preamble(Stream stream)
        {
            int b0 = stream.ReadByte();
            int b1 = stream.ReadByte();

            if (b0 == 0xfe && b1 == 0xff)
                return 1201; // UTF16BE
            if (b0 == 0xff && b1 == 0xfe)
                return 1200; // UTF16LE

            int b2 = stream.ReadByte();
            if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                return 65001; // UTF8
            //
            // There is no unicode preamble, so we
            // return denoter for the machine default.
            //
            stream.Seek(0, SeekOrigin.Begin);
            return 0;
        }
#endif // !BYTEMODE
    }
#endif // !NOFILES
    #endregion Buffer classes

    // ==============================================================
    // ============      class CodePageHandling         =============
    // ==============================================================
#if (!NOFILES)
    public static class CodePageHandling
    {
        public static int GetCodePage(string option)
        {
            string command = option.ToUpperInvariant();
            if (command.StartsWith("CodePage:", StringComparison.OrdinalIgnoreCase))
                command = command.Substring(9);
            try
            {
                if (command.Equals("RAW"))
                    return -1;
                else if (command.Equals("GUESS"))
                    return -2;
                else if (command.Equals("DEFAULT"))
                    return 0;
                else if (char.IsDigit(command[0]))
                    return int.Parse(command, CultureInfo.InvariantCulture);
                else
                {
                    Encoding enc = Encoding.GetEncoding(command);
                    return enc.CodePage;
                }
            }
            catch (FormatException)
            {
                Console.Error.WriteLine(
                    "Invalid format \"{0}\", using machine default", option);
            }
            catch (ArgumentException)
            {
                Console.Error.WriteLine(
                    "Unknown code page \"{0}\", using machine default", option);
            }
            return 0;
        }
    }
#region guesser
#if (!BYTEMODE)
    // ==============================================================
    // ============          Encoding Guesser           =============
    // ==============================================================

    /// <summary>
    /// This class provides a simple finite state automaton that
    /// scans the file looking for (1) valid UTF-8 byte patterns,
    /// (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
    /// The method then guesses whether it is UTF-8 or maybe some 
    /// local machine default encoding.  This works well for the
    /// various Latin encodings.
    /// </summary>
    internal class Guesser
    {
        ScanBuff buffer;

        public int GuessCodePage() { return Scan(); }

        const int maxAccept = 10;
        const int initial = 0;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int EndToken = 0;

        #region user code
        /* 
         *  Reads the bytes of a file to determine if it is 
         *  UTF-8 or a single-byte code page file.
         */
        public long utfX;
        public long uppr;
        #endregion user code

        int state;
        int currentStart = startState[0];
        int code;

        #region ScannerTables
        static int[] startState = new int[] { 11, 0 };

        #region CharacterMap
        static sbyte[] map = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'P' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '`' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'p' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xC0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xD0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
        #endregion

        static sbyte[][] nextState = new sbyte[][] {
            new sbyte[] {0, 0, 0, 0, 0, 0},
            new sbyte[] {-1, -1, 10, -1, -1, -1},
            new sbyte[] {-1, -1, -1, -1, -1, -1},
            new sbyte[] {-1, -1, 8, -1, -1, -1},
            new sbyte[] {-1, -1, 5, -1, -1, -1},
            new sbyte[] {-1, -1, 6, -1, -1, -1},
            new sbyte[] {-1, -1, 7, -1, -1, -1},
            null,
            new sbyte[] {-1, -1, 9, -1, -1, -1},
            null,
            null,
            new sbyte[] {-1, 1, 2, 3, 4, 2}
        };


        [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        // Reason for suppression: cannot have self-reference in array initializer.
        static Guesser()
        {
            nextState[7] = nextState[2];
            nextState[9] = nextState[2];
            nextState[10] = nextState[2];
        }

        int NextState()
        {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                return nextState[state][map[code]];
        }
        #endregion

        public Guesser(System.IO.Stream file) { SetSource(file); }

        public void SetSource(System.IO.Stream source)
        {
            this.buffer = new BuildBuffer(source);
            code = buffer.Read();
        }

        int Scan()
        {
            for (; ; )
            {
                int next;
                state = currentStart;
                while ((next = NextState()) == goStart)
                    code = buffer.Read();

                state = next;
                code = buffer.Read();

                while ((next = NextState()) > eofNum)
                {
                    state = next;
                    code = buffer.Read();
                }
                if (state <= maxAccept)
                {
                    #region ActionSwitch
#pragma warning disable 162
                    switch (state)
                    {
                        case eofNum:
                            switch (currentStart)
                            {
                                case 11:
                                    if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                                    else if (uppr * 10 > utfX) return 0;   /* default code page */
                                    else return 65001;                     /* UTF-8 encoding */
                                    break;
                            }
                            return EndToken;
                        case 1: // Recognized '{Upper128}',	Shortest string "\xC0"
                        case 2: // Recognized '{Upper128}',	Shortest string "\x80"
                        case 3: // Recognized '{Upper128}',	Shortest string "\xE0"
                        case 4: // Recognized '{Upper128}',	Shortest string "\xF0"
                            uppr++;
                            break;
                        case 5: // Recognized '{Utf8pfx4}{Utf8cont}',	Shortest string "\xF0\x80"
                            uppr += 2;
                            break;
                        case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}',	Shortest string "\xF0\x80\x80"
                            uppr += 3;
                            break;
                        case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}',	Shortest string "\xF0\x80\x80\x80"
                            utfX += 3;
                            break;
                        case 8: // Recognized '{Utf8pfx3}{Utf8cont}',	Shortest string "\xE0\x80"
                            uppr += 2;
                            break;
                        case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}',	Shortest string "\xE0\x80\x80"
                            utfX += 2;
                            break;
                        case 10: // Recognized '{Utf8pfx2}{Utf8cont}',	Shortest string "\xC0\x80"
                            utfX++;
                            break;
                        default:
                            break;
                    }
#pragma warning restore 162
                    #endregion
                }
            }
        }
    } // end class Guesser
    
#endif // !BYTEMODE
#endregion
#endif // !NOFILES

// End of code copied from embedded resource

} // end namespace
