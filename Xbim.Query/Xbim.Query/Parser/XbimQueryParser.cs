// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  CENTAURUS
// DateTime: 31.8.2013 15:53:22
// UserName: Martin
// Input file <XbimQueryParser.y - 31.8.2013 15:53:18>

// options: conflicts lines gplex conflicts listing

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Xbim.Gppg;

namespace Xbim.Query
{
internal enum Tokens {error=60,
    EOF=61,INTEGER=62,FLOAT=63,STRING=64,BOOLEAN=65,NONDEF=66,
    IDENTIFIER=67,OP_EQ=68,OP_NEQ=69,OP_GT=70,OP_LT=71,OP_GTE=72,
    OP_LTQ=73,OP_CONTAINS=74,OP_NOT_CONTAINS=75,OP_AND=76,OP_OR=77,PRODUCT=78,
    PRODUCT_TYPE=79,SELECT=80,WHERE=81,CREATE=82,WITH_NAME=83,DESCRIPTION=84,
    NEW=85,ADD=86,TO=87,REMOVE=88,FROM=89,NAME=90,
    PREDEFINED_TYPE=91,TYPE=92,MATERIAL=93};

internal partial struct ValueType
#line 12 "XbimQueryParser.y"
{
#line 13 "XbimQueryParser.y"
		public string strVal;
#line 14 "XbimQueryParser.y"
		public int intVal;
#line 15 "XbimQueryParser.y"
		public float floatVal;
#line 16 "XbimQueryParser.y"
		public bool boolVal;
#line 17 "XbimQueryParser.y"
		public Type typeVal;
#line 18 "XbimQueryParser.y"
	  }
// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

internal partial class XbimQueryParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from XbimQueryParser.y - 31.8.2013 15:53:18
#line 2 "XbimQueryParser.y"
	
  // End verbatim content from XbimQueryParser.y - 31.8.2013 15:53:18

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[54];
  private static State[] states = new State[107];
  private static string[] nonTerms = new string[] {
      "expressions", "$accept", "expression", "selection", "creation", "addition", 
      "conditions", "condition", "attributeCondidion", "materialCondition", "typeCondition", 
      "propertyCondition", "attribute", "op_bool", "op_cont", "op_num_rel", };

  static XbimQueryParser() {
    states[0] = new State(new int[]{80,5,67,58,82,74,86,95,88,100,60,106},new int[]{-1,1,-3,105,-4,4,-5,73,-6,94});
    states[1] = new State(new int[]{61,2,80,5,67,58,82,74,86,95,88,100},new int[]{-3,3,-4,4,-5,73,-6,94});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-5);
    states[5] = new State(new int[]{78,6});
    states[6] = new State(new int[]{59,7,81,8});
    states[7] = new State(-8);
    states[8] = new State(new int[]{90,24,84,25,91,26,93,28,92,34,64,40,76,-24,77,-24,59,-24},new int[]{-7,9,-8,11,-9,14,-13,15,-10,27,-11,33,-12,39});
    states[9] = new State(new int[]{59,10});
    states[10] = new State(-9);
    states[11] = new State(new int[]{76,12,77,56,59,-23});
    states[12] = new State(new int[]{90,24,84,25,91,26,93,28,92,34,64,40,59,-24},new int[]{-8,13,-9,14,-13,15,-10,27,-11,33,-12,39});
    states[13] = new State(-21);
    states[14] = new State(-25);
    states[15] = new State(new int[]{68,20,69,21,74,22,75,23},new int[]{-14,16,-15,18});
    states[16] = new State(new int[]{64,17});
    states[17] = new State(-29);
    states[18] = new State(new int[]{64,19});
    states[19] = new State(-30);
    states[20] = new State(-46);
    states[21] = new State(-47);
    states[22] = new State(-52);
    states[23] = new State(-53);
    states[24] = new State(-31);
    states[25] = new State(-32);
    states[26] = new State(-33);
    states[27] = new State(-26);
    states[28] = new State(new int[]{68,20,69,21,74,22,75,23},new int[]{-14,29,-15,31});
    states[29] = new State(new int[]{64,30});
    states[30] = new State(-34);
    states[31] = new State(new int[]{64,32});
    states[32] = new State(-35);
    states[33] = new State(-27);
    states[34] = new State(new int[]{68,35,69,37});
    states[35] = new State(new int[]{79,36});
    states[36] = new State(-36);
    states[37] = new State(new int[]{79,38});
    states[38] = new State(-37);
    states[39] = new State(-28);
    states[40] = new State(new int[]{68,20,69,21,70,52,71,53,72,54,73,55,74,22,75,23},new int[]{-14,41,-16,47,-15,50});
    states[41] = new State(new int[]{62,42,63,43,64,44,65,45,66,46});
    states[42] = new State(-38);
    states[43] = new State(-40);
    states[44] = new State(-42);
    states[45] = new State(-44);
    states[46] = new State(-45);
    states[47] = new State(new int[]{62,48,63,49});
    states[48] = new State(-39);
    states[49] = new State(-41);
    states[50] = new State(new int[]{64,51});
    states[51] = new State(-43);
    states[52] = new State(-48);
    states[53] = new State(-49);
    states[54] = new State(-50);
    states[55] = new State(-51);
    states[56] = new State(new int[]{90,24,84,25,91,26,93,28,92,34,64,40,59,-24},new int[]{-8,57,-9,14,-13,15,-10,27,-11,33,-12,39});
    states[57] = new State(-22);
    states[58] = new State(new int[]{68,59,69,68});
    states[59] = new State(new int[]{78,60,85,64});
    states[60] = new State(new int[]{81,61});
    states[61] = new State(new int[]{90,24,84,25,91,26,93,28,92,34,64,40,76,-24,77,-24,59,-24},new int[]{-7,62,-8,11,-9,14,-13,15,-10,27,-11,33,-12,39});
    states[62] = new State(new int[]{59,63});
    states[63] = new State(-10);
    states[64] = new State(new int[]{78,65});
    states[65] = new State(new int[]{64,66});
    states[66] = new State(new int[]{59,67});
    states[67] = new State(-18);
    states[68] = new State(new int[]{78,69});
    states[69] = new State(new int[]{81,70});
    states[70] = new State(new int[]{90,24,84,25,91,26,93,28,92,34,64,40,76,-24,77,-24,59,-24},new int[]{-7,71,-8,11,-9,14,-13,15,-10,27,-11,33,-12,39});
    states[71] = new State(new int[]{59,72});
    states[72] = new State(-11);
    states[73] = new State(-6);
    states[74] = new State(new int[]{78,75,85,84});
    states[75] = new State(new int[]{83,76,64,82});
    states[76] = new State(new int[]{64,77});
    states[77] = new State(new int[]{59,78,84,79});
    states[78] = new State(-12);
    states[79] = new State(new int[]{64,80});
    states[80] = new State(new int[]{59,81});
    states[81] = new State(-16);
    states[82] = new State(new int[]{59,83});
    states[83] = new State(-15);
    states[84] = new State(new int[]{78,85});
    states[85] = new State(new int[]{83,86,64,92});
    states[86] = new State(new int[]{64,87});
    states[87] = new State(new int[]{59,88,84,89});
    states[88] = new State(-13);
    states[89] = new State(new int[]{64,90});
    states[90] = new State(new int[]{59,91});
    states[91] = new State(-17);
    states[92] = new State(new int[]{59,93});
    states[93] = new State(-14);
    states[94] = new State(-7);
    states[95] = new State(new int[]{67,96});
    states[96] = new State(new int[]{87,97});
    states[97] = new State(new int[]{67,98});
    states[98] = new State(new int[]{59,99});
    states[99] = new State(-19);
    states[100] = new State(new int[]{67,101});
    states[101] = new State(new int[]{89,102});
    states[102] = new State(new int[]{67,103});
    states[103] = new State(new int[]{59,104});
    states[104] = new State(-20);
    states[105] = new State(-3);
    states[106] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,61});
    rules[2] = new Rule(-1, new int[]{-1,-3});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-1, new int[]{60});
    rules[5] = new Rule(-3, new int[]{-4});
    rules[6] = new Rule(-3, new int[]{-5});
    rules[7] = new Rule(-3, new int[]{-6});
    rules[8] = new Rule(-4, new int[]{80,78,59});
    rules[9] = new Rule(-4, new int[]{80,78,81,-7,59});
    rules[10] = new Rule(-4, new int[]{67,68,78,81,-7,59});
    rules[11] = new Rule(-4, new int[]{67,69,78,81,-7,59});
    rules[12] = new Rule(-5, new int[]{82,78,83,64,59});
    rules[13] = new Rule(-5, new int[]{82,85,78,83,64,59});
    rules[14] = new Rule(-5, new int[]{82,85,78,64,59});
    rules[15] = new Rule(-5, new int[]{82,78,64,59});
    rules[16] = new Rule(-5, new int[]{82,78,83,64,84,64,59});
    rules[17] = new Rule(-5, new int[]{82,85,78,83,64,84,64,59});
    rules[18] = new Rule(-5, new int[]{67,68,85,78,64,59});
    rules[19] = new Rule(-6, new int[]{86,67,87,67,59});
    rules[20] = new Rule(-6, new int[]{88,67,89,67,59});
    rules[21] = new Rule(-7, new int[]{-8,76,-8});
    rules[22] = new Rule(-7, new int[]{-8,77,-8});
    rules[23] = new Rule(-7, new int[]{-8});
    rules[24] = new Rule(-8, new int[]{});
    rules[25] = new Rule(-8, new int[]{-9});
    rules[26] = new Rule(-8, new int[]{-10});
    rules[27] = new Rule(-8, new int[]{-11});
    rules[28] = new Rule(-8, new int[]{-12});
    rules[29] = new Rule(-9, new int[]{-13,-14,64});
    rules[30] = new Rule(-9, new int[]{-13,-15,64});
    rules[31] = new Rule(-13, new int[]{90});
    rules[32] = new Rule(-13, new int[]{84});
    rules[33] = new Rule(-13, new int[]{91});
    rules[34] = new Rule(-10, new int[]{93,-14,64});
    rules[35] = new Rule(-10, new int[]{93,-15,64});
    rules[36] = new Rule(-11, new int[]{92,68,79});
    rules[37] = new Rule(-11, new int[]{92,69,79});
    rules[38] = new Rule(-12, new int[]{64,-14,62});
    rules[39] = new Rule(-12, new int[]{64,-16,62});
    rules[40] = new Rule(-12, new int[]{64,-14,63});
    rules[41] = new Rule(-12, new int[]{64,-16,63});
    rules[42] = new Rule(-12, new int[]{64,-14,64});
    rules[43] = new Rule(-12, new int[]{64,-15,64});
    rules[44] = new Rule(-12, new int[]{64,-14,65});
    rules[45] = new Rule(-12, new int[]{64,-14,66});
    rules[46] = new Rule(-14, new int[]{68});
    rules[47] = new Rule(-14, new int[]{69});
    rules[48] = new Rule(-16, new int[]{70});
    rules[49] = new Rule(-16, new int[]{71});
    rules[50] = new Rule(-16, new int[]{72});
    rules[51] = new Rule(-16, new int[]{73});
    rules[52] = new Rule(-15, new int[]{74});
    rules[53] = new Rule(-15, new int[]{75});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 12: // creation -> CREATE, PRODUCT, WITH_NAME, STRING, ';'
#line 78 "XbimQueryParser.y"
{CreateObject(ValueStack[ValueStack.Depth-5].typeVal, ValueStack[ValueStack.Depth-2].strVal);}
        break;
      case 13: // creation -> CREATE, NEW, PRODUCT, WITH_NAME, STRING, ';'
#line 79 "XbimQueryParser.y"
{CreateObject(ValueStack[ValueStack.Depth-4].typeVal, ValueStack[ValueStack.Depth-2].strVal);}
        break;
      case 14: // creation -> CREATE, NEW, PRODUCT, STRING, ';'
#line 80 "XbimQueryParser.y"
{CreateObject(ValueStack[ValueStack.Depth-3].typeVal, ValueStack[ValueStack.Depth-2].strVal);}
        break;
      case 15: // creation -> CREATE, PRODUCT, STRING, ';'
#line 81 "XbimQueryParser.y"
{CreateObject(ValueStack[ValueStack.Depth-3].typeVal, ValueStack[ValueStack.Depth-2].strVal);}
        break;
      case 16: // creation -> CREATE, PRODUCT, WITH_NAME, STRING, DESCRIPTION, STRING, ';'
#line 82 "XbimQueryParser.y"
{CreateObject(ValueStack[ValueStack.Depth-6].typeVal, ValueStack[ValueStack.Depth-4].strVal, ValueStack[ValueStack.Depth-2].strVal);}
        break;
      case 17: // creation -> CREATE, NEW, PRODUCT, WITH_NAME, STRING, DESCRIPTION, STRING, ';'
#line 83 "XbimQueryParser.y"
{CreateObject(ValueStack[ValueStack.Depth-6].typeVal, ValueStack[ValueStack.Depth-4].strVal, ValueStack[ValueStack.Depth-2].strVal);}
        break;
      case 18: // creation -> IDENTIFIER, OP_EQ, NEW, PRODUCT, STRING, ';'
#line 84 "XbimQueryParser.y"
{Variables.Set(ValueStack[ValueStack.Depth-6].strVal, CreateObject(ValueStack[ValueStack.Depth-3].typeVal, ValueStack[ValueStack.Depth-2].strVal));}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
